// Generated by dust (version 0.15.1) - do not edit
#include <cpp11.hpp>

[[cpp11::register]]
cpp11::sexp dust_model_gpu_info();
[[cpp11::register]]
SEXP dust_cpu_model_alloc(cpp11::list r_pars, bool pars_multi, cpp11::sexp r_time,
                         cpp11::sexp r_n_particles, int n_threads,
                         cpp11::sexp r_seed, bool deterministic,
                         cpp11::sexp gpu_config, cpp11::sexp ode_control);

[[cpp11::register]]
cpp11::sexp dust_cpu_model_capabilities();

[[cpp11::register]]
SEXP dust_cpu_model_run(SEXP ptr, cpp11::sexp r_time_end);

[[cpp11::register]]
SEXP dust_cpu_model_simulate(SEXP ptr, cpp11::sexp time_end);

[[cpp11::register]]
SEXP dust_cpu_model_run_adjoint(SEXP ptr);

[[cpp11::register]]
SEXP dust_cpu_model_set_index(SEXP ptr, cpp11::sexp r_index);

[[cpp11::register]]
SEXP dust_cpu_model_update_state(SEXP ptr, SEXP r_pars, SEXP r_state,
                                           SEXP r_time, SEXP r_set_initial_state,
                                           SEXP index, SEXP reset_step_size);

[[cpp11::register]]
SEXP dust_cpu_model_state(SEXP ptr, SEXP r_index);

[[cpp11::register]]
SEXP dust_cpu_model_time(SEXP ptr);

[[cpp11::register]]
void dust_cpu_model_reorder(SEXP ptr, cpp11::sexp r_index);

[[cpp11::register]]
SEXP dust_cpu_model_resample(SEXP ptr, cpp11::doubles r_weights);

[[cpp11::register]]
SEXP dust_cpu_model_rng_state(SEXP ptr, bool first_only, bool last_only);

[[cpp11::register]]
SEXP dust_cpu_model_set_rng_state(SEXP ptr, cpp11::raws rng_state);

[[cpp11::register]]
SEXP dust_cpu_model_set_data(SEXP ptr, cpp11::list data, bool shared);

[[cpp11::register]]
SEXP dust_cpu_model_compare_data(SEXP ptr);

[[cpp11::register]]
SEXP dust_cpu_model_filter(SEXP ptr, SEXP time_end,
                                     bool save_trajectories,
                                     cpp11::sexp time_snapshot,
                                     cpp11::sexp min_log_likelihood);

[[cpp11::register]]
void dust_cpu_model_set_n_threads(SEXP ptr, int n_threads);

[[cpp11::register]]
int dust_cpu_model_n_state(SEXP ptr);

[[cpp11::register]]
void dust_cpu_model_set_stochastic_schedule(SEXP ptr, SEXP time);

[[cpp11::register]]
SEXP dust_cpu_model_ode_statistics(SEXP ptr);
#include <dust/r/dust.hpp>

// Generated by odin.dust (version 0.3.10) - do not edit
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum1(const container x, size_t from, size_t to);
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum2(const container x, int from_i, int to_i, int from_j, int to_j, int dim_x_1);
template <typename real_type, typename T, typename U>
__host__ __device__ real_type fintdiv(T x, U y) {
  return std::floor(x / y);
}

template <typename real_type, typename T, typename U>
__host__ __device__ real_type fmodr(T x, U y) {
  real_type tmp = std::fmod(static_cast<real_type>(x),
                            static_cast<real_type>(y));
  if (tmp * y < 0) {
    tmp += y;
  }
  return tmp;
}

// These exist to support the model on the gpu, as in C++14 std::min
// and std::max are constexpr and error without --expt-relaxed-constexpr
template <typename T>
__host__ __device__ T odin_min(T x, T y) {
  return x < y ? x : y;
}

template <typename T>
__host__ __device__ T odin_max(T x, T y) {
  return x > y ? x : y;
}

template <typename T>
__host__ __device__ T odin_sign(T x) {
  return (x > 0) ? 1 : ((x < 0) ? -1 : 0);
}
// [[dust::class(model)]]
// [[dust::time_type(discrete)]]
// [[dust::param(age_rate_d, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(age_removal_d, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Beta_fT0, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Beta_hm_max, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Beta_mh_max, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Beta_pT0d, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Beta_pTm, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Beta_Tm, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(births_d, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(CALIB_YEAR, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(climate_d, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(COVID_START, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(COVID_STOP, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(COVID_trans_level, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(DATA_NUM_WEEKS, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(DATA_REPORTING_DELAY, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(DATA_SERO_YEAR, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(DATA_START_YEAR, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(delta_fT0, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(delta_p, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(delta_pT0d, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(delta_pTm, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(delta_Tm, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(dis_pri, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(dis_quart, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(dis_sec, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(dis_tert, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(dur_cross_prot, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(eip, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(epsilon, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(EQUILIB_YEARS, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(extInf, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(FIRST_CLIM_YEAR, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(FIRST_YEAR, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(incub, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(inf_per, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(init_inf_mos, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(kappa, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(LAST_CLIM_YEAR, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(LAST_YEAR, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(life_expec_d, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(max_rain, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Mwt, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(N_sim, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(NTP, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(omega, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(phi_dis_enhance, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(pop_size_d, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Rel_R01, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Rel_R02, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Rel_R03, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Rel_R04, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(REPEAT_CLIM_4YEARS, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(Rm, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(sat_rain, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(sdis_pri, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(sdis_quart, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(sdis_sec, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(sdis_tert, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(sigma, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(tau_rain, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
class model {
public:
  using real_type = double;
  using rng_state_type = dust::random::generator<real_type>;
  using data_type = dust::no_data;
  struct shared_type {
    real_type accum_rain_eq;
    real_type Acrit;
    real_type age_per;
    std::vector<real_type> age_rate_d;
    std::vector<real_type> age_removal_d;
    std::vector<real_type> ageb;
    std::vector<real_type> agec;
    real_type Beta_fT0;
    real_type Beta_hm_max;
    real_type Beta_hm_mean;
    real_type Beta_mh_max;
    real_type Beta_mh_mean;
    real_type Beta_norm;
    real_type Beta_pT0;
    real_type Beta_pT0d;
    real_type Beta_pTm;
    real_type Beta_T0;
    real_type Beta_Tm;
    real_type Beta_Tp;
    std::vector<real_type> births_d;
    real_type CALIB_YEAR;
    std::vector<real_type> climate_d;
    real_type COVID_START;
    real_type COVID_STOP;
    real_type COVID_trans_level;
    int DATA_NUM_WEEKS;
    int DATA_NUM_YEARS;
    real_type DATA_REPORTING_DELAY;
    real_type DATA_SERO_YEAR;
    real_type DATA_START_YEAR;
    real_type DAYS_IN_4Y;
    real_type delta_fT0;
    real_type delta_max;
    real_type delta_norm;
    real_type delta_p;
    real_type delta_pT0;
    real_type delta_pT0d;
    real_type delta_pTm;
    real_type delta_T0;
    real_type delta_Tm;
    real_type delta_Tp;
    real_type delta0;
    int dim_age_I1;
    int dim_age_I12;
    int dim_age_I123;
    int dim_age_I1234;
    int dim_age_I124;
    int dim_age_I1243;
    int dim_age_I13;
    int dim_age_I132;
    int dim_age_I134;
    int dim_age_I1342;
    int dim_age_I14;
    int dim_age_I142;
    int dim_age_I143;
    int dim_age_I2;
    int dim_age_I21;
    int dim_age_I23;
    int dim_age_I231;
    int dim_age_I234;
    int dim_age_I2341;
    int dim_age_I24;
    int dim_age_I241;
    int dim_age_I243;
    int dim_age_I3;
    int dim_age_I31;
    int dim_age_I32;
    int dim_age_I34;
    int dim_age_I341;
    int dim_age_I342;
    int dim_age_I4;
    int dim_age_I41;
    int dim_age_I42;
    int dim_age_I43;
    int dim_age_R1;
    int dim_age_R12;
    int dim_age_R123;
    int dim_age_R1234;
    int dim_age_R124;
    int dim_age_R13;
    int dim_age_R134;
    int dim_age_R14;
    int dim_age_R2;
    int dim_age_R23;
    int dim_age_R234;
    int dim_age_R24;
    int dim_age_R3;
    int dim_age_R34;
    int dim_age_R4;
    int dim_age_rate_d;
    int dim_age_rate_d_1;
    int dim_age_rate_d_2;
    int dim_age_removal_d;
    int dim_age_removal_d_1;
    int dim_age_removal_d_2;
    int dim_age_S;
    int dim_ageb;
    int dim_agec;
    int dim_agert;
    int dim_births_d;
    int dim_births_d_1;
    int dim_births_d_2;
    int dim_climate_d;
    int dim_climate_d_1;
    int dim_climate_d_2;
    int dim_cur_age_rate;
    int dim_death;
    int dim_deathrt;
    int dim_dis_pri;
    int dim_dis_quart;
    int dim_dis_sec;
    int dim_dis_tert;
    int dim_disease;
    int dim_disease_sero;
    int dim_disease_sero_1;
    int dim_disease_sero_2;
    int dim_FOI1a;
    int dim_FOI2a;
    int dim_FOI3a;
    int dim_FOI4a;
    int dim_FOIas;
    int dim_I1;
    int dim_I12;
    int dim_I123;
    int dim_I1234;
    int dim_I124;
    int dim_I1243;
    int dim_I13;
    int dim_I132;
    int dim_I134;
    int dim_I1342;
    int dim_I14;
    int dim_I142;
    int dim_I143;
    int dim_I2;
    int dim_I21;
    int dim_I23;
    int dim_I231;
    int dim_I234;
    int dim_I2341;
    int dim_I24;
    int dim_I241;
    int dim_I243;
    int dim_I3;
    int dim_I31;
    int dim_I32;
    int dim_I34;
    int dim_I341;
    int dim_I342;
    int dim_I4;
    int dim_I41;
    int dim_I42;
    int dim_I43;
    int dim_inf_1;
    int dim_inf_12;
    int dim_inf_123;
    int dim_inf_1234;
    int dim_inf_124;
    int dim_inf_1243;
    int dim_inf_13;
    int dim_inf_132;
    int dim_inf_134;
    int dim_inf_1342;
    int dim_inf_14;
    int dim_inf_142;
    int dim_inf_143;
    int dim_inf_2;
    int dim_inf_21;
    int dim_inf_23;
    int dim_inf_231;
    int dim_inf_234;
    int dim_inf_2341;
    int dim_inf_24;
    int dim_inf_241;
    int dim_inf_243;
    int dim_inf_3;
    int dim_inf_31;
    int dim_inf_32;
    int dim_inf_34;
    int dim_inf_341;
    int dim_inf_342;
    int dim_inf_4;
    int dim_inf_41;
    int dim_inf_42;
    int dim_inf_43;
    int dim_infection_pri;
    int dim_infection_sec;
    int dim_infection_tq;
    int dim_init_inf_mos;
    int dim_init_life_expec;
    int dim_life_expec;
    int dim_life_expec_d;
    int dim_life_expec_d_1;
    int dim_life_expec_d_2;
    int dim_mean_age;
    int dim_N_init_age;
    int dim_N_init_age0;
    int dim_Ntotal;
    int dim_Ntotal_out;
    int dim_O_I1;
    int dim_O_I12;
    int dim_O_I123;
    int dim_O_I1234;
    int dim_O_I124;
    int dim_O_I1243;
    int dim_O_I13;
    int dim_O_I132;
    int dim_O_I134;
    int dim_O_I1342;
    int dim_O_I14;
    int dim_O_I142;
    int dim_O_I143;
    int dim_O_I2;
    int dim_O_I21;
    int dim_O_I23;
    int dim_O_I231;
    int dim_O_I234;
    int dim_O_I2341;
    int dim_O_I24;
    int dim_O_I241;
    int dim_O_I243;
    int dim_O_I3;
    int dim_O_I31;
    int dim_O_I32;
    int dim_O_I34;
    int dim_O_I341;
    int dim_O_I342;
    int dim_O_I4;
    int dim_O_I41;
    int dim_O_I42;
    int dim_O_I43;
    int dim_O_R1;
    int dim_O_R12;
    int dim_O_R123;
    int dim_O_R1234;
    int dim_O_R124;
    int dim_O_R13;
    int dim_O_R134;
    int dim_O_R14;
    int dim_O_R2;
    int dim_O_R23;
    int dim_O_R234;
    int dim_O_R24;
    int dim_O_R3;
    int dim_O_R34;
    int dim_O_R4;
    int dim_O_S;
    int dim_out_cases_yr_switch;
    int dim_out_disease_age;
    int dim_out_disease_cur_week;
    int dim_out_disease_isowk;
    int dim_out_disease_tot;
    int dim_out_disease_tot_yr;
    int dim_out_iso_update_switch;
    int dim_out_seronegative;
    int dim_out_update_switch;
    int dim_phi_pri;
    int dim_phi_quart;
    int dim_phi_scale;
    int dim_phi_sec;
    int dim_phi_tert;
    int dim_pop_size_d;
    int dim_R1;
    int dim_R12;
    int dim_R123;
    int dim_R1234;
    int dim_R124;
    int dim_R13;
    int dim_R134;
    int dim_R14;
    int dim_R2;
    int dim_R23;
    int dim_R234;
    int dim_R24;
    int dim_R3;
    int dim_R34;
    int dim_R4;
    int dim_recov_1;
    int dim_recov_12;
    int dim_recov_123;
    int dim_recov_1234;
    int dim_recov_124;
    int dim_recov_1243;
    int dim_recov_13;
    int dim_recov_132;
    int dim_recov_134;
    int dim_recov_1342;
    int dim_recov_14;
    int dim_recov_142;
    int dim_recov_143;
    int dim_recov_2;
    int dim_recov_21;
    int dim_recov_23;
    int dim_recov_231;
    int dim_recov_234;
    int dim_recov_2341;
    int dim_recov_24;
    int dim_recov_241;
    int dim_recov_243;
    int dim_recov_3;
    int dim_recov_31;
    int dim_recov_32;
    int dim_recov_34;
    int dim_recov_341;
    int dim_recov_342;
    int dim_recov_4;
    int dim_recov_41;
    int dim_recov_42;
    int dim_recov_43;
    int dim_S;
    int dim_sdis_pri;
    int dim_sdis_quart;
    int dim_sdis_sec;
    int dim_sdis_tert;
    int dim_seroneg;
    int dim_suscinitpop;
    int dim_Y1;
    int dim_Y2;
    int dim_Y3;
    int dim_Y4;
    std::vector<real_type> dis_pri;
    std::vector<real_type> dis_quart;
    std::vector<real_type> dis_sec;
    std::vector<real_type> dis_tert;
    real_type DOW_START;
    real_type DOW_START0;
    real_type DT;
    real_type dur_cross_prot;
    real_type eip;
    real_type epsilon;
    real_type eq_FOI1;
    real_type eq_FOI2;
    real_type eq_FOI3;
    real_type eq_FOI4;
    real_type EQUILIB_YEARS;
    real_type extInf;
    real_type extInfRand;
    real_type FIRST_CLIM_YEAR;
    real_type FIRST_YEAR;
    real_type FOIagescale;
    std::vector<real_type> FOIas;
    real_type gamma;
    real_type incub;
    real_type inf_per;
    std::vector<real_type> init_inf_mos;
    std::vector<real_type> init_life_expec;
    real_type init_lifespan;
    real_type initial_accum_rain;
    real_type initial_cur_tot_FOI;
    real_type initial_DATA_DAY;
    real_type initial_exposed1;
    real_type initial_exposed2;
    real_type initial_exposed3;
    real_type initial_exposed4;
    std::vector<real_type> initial_I1;
    std::vector<real_type> initial_I12;
    std::vector<real_type> initial_I123;
    std::vector<real_type> initial_I1234;
    std::vector<real_type> initial_I124;
    std::vector<real_type> initial_I1243;
    std::vector<real_type> initial_I13;
    std::vector<real_type> initial_I132;
    std::vector<real_type> initial_I134;
    std::vector<real_type> initial_I1342;
    std::vector<real_type> initial_I14;
    std::vector<real_type> initial_I142;
    std::vector<real_type> initial_I143;
    std::vector<real_type> initial_I2;
    std::vector<real_type> initial_I21;
    std::vector<real_type> initial_I23;
    std::vector<real_type> initial_I231;
    std::vector<real_type> initial_I234;
    std::vector<real_type> initial_I2341;
    std::vector<real_type> initial_I24;
    std::vector<real_type> initial_I241;
    std::vector<real_type> initial_I243;
    std::vector<real_type> initial_I3;
    std::vector<real_type> initial_I31;
    std::vector<real_type> initial_I32;
    std::vector<real_type> initial_I34;
    std::vector<real_type> initial_I341;
    std::vector<real_type> initial_I342;
    std::vector<real_type> initial_I4;
    std::vector<real_type> initial_I41;
    std::vector<real_type> initial_I42;
    std::vector<real_type> initial_I43;
    real_type initial_inc_FOI1;
    real_type initial_inc_FOI2;
    real_type initial_inc_FOI3;
    real_type initial_inc_FOI4;
    real_type initial_infectious1;
    real_type initial_infectious2;
    real_type initial_infectious3;
    real_type initial_infectious4;
    real_type initial_Lwt;
    real_type initial_Mwt_E1;
    real_type initial_Mwt_E2;
    real_type initial_Mwt_E3;
    real_type initial_Mwt_E4;
    real_type initial_Mwt_I1;
    real_type initial_Mwt_I2;
    real_type initial_Mwt_I3;
    real_type initial_Mwt_I4;
    real_type initial_Mwt_S;
    real_type initial_NT_out;
    std::vector<real_type> initial_Ntotal_out;
    real_type initial_out_beta;
    real_type initial_out_cur_clim_day;
    real_type initial_out_CUR_DOW;
    real_type initial_out_curisoweek;
    real_type initial_out_delta;
    std::vector<real_type> initial_out_disease_age;
    std::vector<real_type> initial_out_disease_cur_week;
    std::vector<real_type> initial_out_disease_isowk;
    std::vector<real_type> initial_out_disease_tot;
    std::vector<real_type> initial_out_disease_tot_yr;
    real_type initial_out_Mwt;
    real_type initial_out_R0agescale;
    std::vector<real_type> initial_out_seronegative;
    real_type initial_out_temp;
    real_type initial_out_year;
    real_type initial_R0t_1;
    real_type initial_R0t_2;
    real_type initial_R0t_3;
    real_type initial_R0t_4;
    std::vector<real_type> initial_R1;
    std::vector<real_type> initial_R12;
    std::vector<real_type> initial_R123;
    std::vector<real_type> initial_R1234;
    std::vector<real_type> initial_R124;
    std::vector<real_type> initial_R13;
    std::vector<real_type> initial_R134;
    std::vector<real_type> initial_R14;
    std::vector<real_type> initial_R2;
    std::vector<real_type> initial_R23;
    std::vector<real_type> initial_R234;
    std::vector<real_type> initial_R24;
    std::vector<real_type> initial_R3;
    std::vector<real_type> initial_R34;
    std::vector<real_type> initial_R4;
    std::vector<real_type> initial_S;
    real_type initial_tot_inc_FOI;
    real_type initial_Y1T_out;
    real_type initial_Y2T_out;
    real_type initial_Y3T_out;
    real_type initial_Y4T_out;
    real_type kappa;
    real_type Kc_mean;
    real_type LAST_CLIM_YEAR;
    real_type LAST_YEAR;
    real_type LEAP_YEAR;
    std::vector<real_type> life_expec_d;
    real_type max_clim_day;
    real_type max_rain;
    real_type max_rel_year;
    std::vector<real_type> mean_age;
    real_type Mwt;
    int N_age;
    int N_age_p1;
    real_type N_eq;
    real_type N_init;
    std::vector<real_type> N_init_age;
    std::vector<real_type> N_init_age0;
    real_type N_sim;
    int NTP;
    real_type nu;
    real_type NUM_YEAR_ACCUM;
    int offset_variable_I1;
    int offset_variable_I12;
    int offset_variable_I123;
    int offset_variable_I1234;
    int offset_variable_I124;
    int offset_variable_I1243;
    int offset_variable_I13;
    int offset_variable_I132;
    int offset_variable_I134;
    int offset_variable_I1342;
    int offset_variable_I14;
    int offset_variable_I142;
    int offset_variable_I143;
    int offset_variable_I2;
    int offset_variable_I21;
    int offset_variable_I23;
    int offset_variable_I231;
    int offset_variable_I234;
    int offset_variable_I2341;
    int offset_variable_I24;
    int offset_variable_I241;
    int offset_variable_I243;
    int offset_variable_I3;
    int offset_variable_I31;
    int offset_variable_I32;
    int offset_variable_I34;
    int offset_variable_I341;
    int offset_variable_I342;
    int offset_variable_I4;
    int offset_variable_I41;
    int offset_variable_I42;
    int offset_variable_I43;
    int offset_variable_Ntotal_out;
    int offset_variable_out_disease_age;
    int offset_variable_out_disease_cur_week;
    int offset_variable_out_disease_isowk;
    int offset_variable_out_disease_tot;
    int offset_variable_out_disease_tot_yr;
    int offset_variable_out_seronegative;
    int offset_variable_R1;
    int offset_variable_R12;
    int offset_variable_R123;
    int offset_variable_R1234;
    int offset_variable_R124;
    int offset_variable_R13;
    int offset_variable_R134;
    int offset_variable_R14;
    int offset_variable_R2;
    int offset_variable_R23;
    int offset_variable_R234;
    int offset_variable_R24;
    int offset_variable_R3;
    int offset_variable_R34;
    int offset_variable_R4;
    real_type omega;
    real_type phi_dis_enhance;
    real_type phi_ed;
    std::vector<real_type> phi_pri;
    std::vector<real_type> phi_quart;
    std::vector<real_type> phi_scale;
    std::vector<real_type> phi_sec;
    std::vector<real_type> phi_tert;
    real_type PI_C;
    real_type pop_scale;
    std::vector<real_type> pop_size_d;
    real_type R0_1;
    real_type R0_2;
    real_type R0_3;
    real_type R0_4;
    real_type R0agescale;
    real_type rainfall_mean;
    real_type rel_first_clim_day;
    real_type rel_first_clim_year;
    real_type rel_last_clim_day;
    real_type rel_last_clim_year;
    real_type Rel_R01;
    real_type Rel_R02;
    real_type Rel_R03;
    real_type Rel_R04;
    real_type REPEAT_CLIM_4YEARS;
    real_type rho_pri;
    real_type rho_quart;
    real_type rho_sec;
    real_type rho_tert;
    real_type Rm;
    real_type sat_rain;
    std::vector<real_type> sdis_pri;
    std::vector<real_type> sdis_quart;
    std::vector<real_type> sdis_sec;
    std::vector<real_type> sdis_tert;
    real_type sigma;
    real_type START_YEAR;
    std::vector<real_type> suscinitpop;
    real_type tau_rain;
    real_type year_calib;
    real_type YEAR_OFFSET;
    real_type YEAR_STEP;
    real_type YL;
  };
  struct internal_type {
    std::vector<real_type> age_I1;
    std::vector<real_type> age_I12;
    std::vector<real_type> age_I123;
    std::vector<real_type> age_I1234;
    std::vector<real_type> age_I124;
    std::vector<real_type> age_I1243;
    std::vector<real_type> age_I13;
    std::vector<real_type> age_I132;
    std::vector<real_type> age_I134;
    std::vector<real_type> age_I1342;
    std::vector<real_type> age_I14;
    std::vector<real_type> age_I142;
    std::vector<real_type> age_I143;
    std::vector<real_type> age_I2;
    std::vector<real_type> age_I21;
    std::vector<real_type> age_I23;
    std::vector<real_type> age_I231;
    std::vector<real_type> age_I234;
    std::vector<real_type> age_I2341;
    std::vector<real_type> age_I24;
    std::vector<real_type> age_I241;
    std::vector<real_type> age_I243;
    std::vector<real_type> age_I3;
    std::vector<real_type> age_I31;
    std::vector<real_type> age_I32;
    std::vector<real_type> age_I34;
    std::vector<real_type> age_I341;
    std::vector<real_type> age_I342;
    std::vector<real_type> age_I4;
    std::vector<real_type> age_I41;
    std::vector<real_type> age_I42;
    std::vector<real_type> age_I43;
    std::vector<real_type> age_R1;
    std::vector<real_type> age_R12;
    std::vector<real_type> age_R123;
    std::vector<real_type> age_R1234;
    std::vector<real_type> age_R124;
    std::vector<real_type> age_R13;
    std::vector<real_type> age_R134;
    std::vector<real_type> age_R14;
    std::vector<real_type> age_R2;
    std::vector<real_type> age_R23;
    std::vector<real_type> age_R234;
    std::vector<real_type> age_R24;
    std::vector<real_type> age_R3;
    std::vector<real_type> age_R34;
    std::vector<real_type> age_R4;
    std::vector<real_type> age_S;
    std::vector<real_type> agert;
    std::vector<real_type> cur_age_rate;
    std::vector<real_type> death;
    std::vector<real_type> deathrt;
    std::vector<real_type> disease;
    std::vector<real_type> disease_sero;
    std::vector<real_type> FOI1a;
    std::vector<real_type> FOI2a;
    std::vector<real_type> FOI3a;
    std::vector<real_type> FOI4a;
    std::vector<real_type> inf_1;
    std::vector<real_type> inf_12;
    std::vector<real_type> inf_123;
    std::vector<real_type> inf_1234;
    std::vector<real_type> inf_124;
    std::vector<real_type> inf_1243;
    std::vector<real_type> inf_13;
    std::vector<real_type> inf_132;
    std::vector<real_type> inf_134;
    std::vector<real_type> inf_1342;
    std::vector<real_type> inf_14;
    std::vector<real_type> inf_142;
    std::vector<real_type> inf_143;
    std::vector<real_type> inf_2;
    std::vector<real_type> inf_21;
    std::vector<real_type> inf_23;
    std::vector<real_type> inf_231;
    std::vector<real_type> inf_234;
    std::vector<real_type> inf_2341;
    std::vector<real_type> inf_24;
    std::vector<real_type> inf_241;
    std::vector<real_type> inf_243;
    std::vector<real_type> inf_3;
    std::vector<real_type> inf_31;
    std::vector<real_type> inf_32;
    std::vector<real_type> inf_34;
    std::vector<real_type> inf_341;
    std::vector<real_type> inf_342;
    std::vector<real_type> inf_4;
    std::vector<real_type> inf_41;
    std::vector<real_type> inf_42;
    std::vector<real_type> inf_43;
    std::vector<real_type> infection_pri;
    std::vector<real_type> infection_sec;
    std::vector<real_type> infection_tq;
    std::vector<real_type> life_expec;
    std::vector<real_type> Ntotal;
    std::vector<real_type> O_I1;
    std::vector<real_type> O_I12;
    std::vector<real_type> O_I123;
    std::vector<real_type> O_I1234;
    std::vector<real_type> O_I124;
    std::vector<real_type> O_I1243;
    std::vector<real_type> O_I13;
    std::vector<real_type> O_I132;
    std::vector<real_type> O_I134;
    std::vector<real_type> O_I1342;
    std::vector<real_type> O_I14;
    std::vector<real_type> O_I142;
    std::vector<real_type> O_I143;
    std::vector<real_type> O_I2;
    std::vector<real_type> O_I21;
    std::vector<real_type> O_I23;
    std::vector<real_type> O_I231;
    std::vector<real_type> O_I234;
    std::vector<real_type> O_I2341;
    std::vector<real_type> O_I24;
    std::vector<real_type> O_I241;
    std::vector<real_type> O_I243;
    std::vector<real_type> O_I3;
    std::vector<real_type> O_I31;
    std::vector<real_type> O_I32;
    std::vector<real_type> O_I34;
    std::vector<real_type> O_I341;
    std::vector<real_type> O_I342;
    std::vector<real_type> O_I4;
    std::vector<real_type> O_I41;
    std::vector<real_type> O_I42;
    std::vector<real_type> O_I43;
    std::vector<real_type> O_R1;
    std::vector<real_type> O_R12;
    std::vector<real_type> O_R123;
    std::vector<real_type> O_R1234;
    std::vector<real_type> O_R124;
    std::vector<real_type> O_R13;
    std::vector<real_type> O_R134;
    std::vector<real_type> O_R14;
    std::vector<real_type> O_R2;
    std::vector<real_type> O_R23;
    std::vector<real_type> O_R234;
    std::vector<real_type> O_R24;
    std::vector<real_type> O_R3;
    std::vector<real_type> O_R34;
    std::vector<real_type> O_R4;
    std::vector<real_type> O_S;
    std::vector<real_type> out_cases_yr_switch;
    std::vector<real_type> out_iso_update_switch;
    std::vector<real_type> out_update_switch;
    std::vector<real_type> recov_1;
    std::vector<real_type> recov_12;
    std::vector<real_type> recov_123;
    std::vector<real_type> recov_1234;
    std::vector<real_type> recov_124;
    std::vector<real_type> recov_1243;
    std::vector<real_type> recov_13;
    std::vector<real_type> recov_132;
    std::vector<real_type> recov_134;
    std::vector<real_type> recov_1342;
    std::vector<real_type> recov_14;
    std::vector<real_type> recov_142;
    std::vector<real_type> recov_143;
    std::vector<real_type> recov_2;
    std::vector<real_type> recov_21;
    std::vector<real_type> recov_23;
    std::vector<real_type> recov_231;
    std::vector<real_type> recov_234;
    std::vector<real_type> recov_2341;
    std::vector<real_type> recov_24;
    std::vector<real_type> recov_241;
    std::vector<real_type> recov_243;
    std::vector<real_type> recov_3;
    std::vector<real_type> recov_31;
    std::vector<real_type> recov_32;
    std::vector<real_type> recov_34;
    std::vector<real_type> recov_341;
    std::vector<real_type> recov_342;
    std::vector<real_type> recov_4;
    std::vector<real_type> recov_41;
    std::vector<real_type> recov_42;
    std::vector<real_type> recov_43;
    std::vector<real_type> seroneg;
    std::vector<real_type> Y1;
    std::vector<real_type> Y2;
    std::vector<real_type> Y3;
    std::vector<real_type> Y4;
  };
  model(const dust::pars_type<model>& pars) :
    shared(pars.shared), internal(pars.internal) {
  }
  size_t size() const {
    return shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I1234 + shared->dim_I124 + shared->dim_I1243 + shared->dim_I13 + shared->dim_I132 + shared->dim_I134 + shared->dim_I1342 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I234 + shared->dim_I2341 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_Ntotal_out + shared->dim_out_disease_age + shared->dim_out_disease_cur_week + shared->dim_out_disease_isowk + shared->dim_out_disease_tot + shared->dim_out_disease_tot_yr + shared->dim_out_seronegative + shared->dim_R1 + shared->dim_R12 + shared->dim_R123 + shared->dim_R1234 + shared->dim_R124 + shared->dim_R13 + shared->dim_R134 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R234 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  }
  std::vector<real_type> initial(size_t step, rng_state_type& rng_state) {
    std::vector<real_type> state(shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I1234 + shared->dim_I124 + shared->dim_I1243 + shared->dim_I13 + shared->dim_I132 + shared->dim_I134 + shared->dim_I1342 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I234 + shared->dim_I2341 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_Ntotal_out + shared->dim_out_disease_age + shared->dim_out_disease_cur_week + shared->dim_out_disease_isowk + shared->dim_out_disease_tot + shared->dim_out_disease_tot_yr + shared->dim_out_seronegative + shared->dim_R1 + shared->dim_R12 + shared->dim_R123 + shared->dim_R1234 + shared->dim_R124 + shared->dim_R13 + shared->dim_R134 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R234 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44);
    state[0] = shared->initial_out_CUR_DOW;
    state[1] = shared->initial_out_year;
    state[2] = shared->initial_DATA_DAY;
    state[3] = shared->initial_out_curisoweek;
    state[4] = shared->initial_out_cur_clim_day;
    state[5] = shared->initial_accum_rain;
    state[6] = shared->initial_out_R0agescale;
    state[7] = shared->initial_Lwt;
    state[8] = shared->initial_Mwt_S;
    state[9] = shared->initial_Mwt_E1;
    state[10] = shared->initial_Mwt_E2;
    state[11] = shared->initial_Mwt_E3;
    state[12] = shared->initial_Mwt_E4;
    state[13] = shared->initial_Mwt_I1;
    state[14] = shared->initial_Mwt_I2;
    state[15] = shared->initial_Mwt_I3;
    state[16] = shared->initial_Mwt_I4;
    state[17] = shared->initial_R0t_1;
    state[18] = shared->initial_R0t_2;
    state[19] = shared->initial_R0t_3;
    state[20] = shared->initial_R0t_4;
    state[21] = shared->initial_out_temp;
    state[22] = shared->initial_out_delta;
    state[23] = shared->initial_out_beta;
    state[24] = shared->initial_out_Mwt;
    state[25] = shared->initial_NT_out;
    state[26] = shared->initial_Y1T_out;
    state[27] = shared->initial_Y2T_out;
    state[28] = shared->initial_Y3T_out;
    state[29] = shared->initial_Y4T_out;
    state[30] = shared->initial_exposed1;
    state[31] = shared->initial_exposed2;
    state[32] = shared->initial_exposed3;
    state[33] = shared->initial_exposed4;
    state[34] = shared->initial_infectious1;
    state[35] = shared->initial_infectious2;
    state[36] = shared->initial_infectious3;
    state[37] = shared->initial_infectious4;
    state[38] = shared->initial_inc_FOI1;
    state[39] = shared->initial_inc_FOI2;
    state[40] = shared->initial_inc_FOI3;
    state[41] = shared->initial_inc_FOI4;
    state[42] = shared->initial_tot_inc_FOI;
    state[43] = shared->initial_cur_tot_FOI;
    std::copy(shared->initial_S.begin(), shared->initial_S.end(), state.begin() + 44);
    std::copy(shared->initial_I1.begin(), shared->initial_I1.end(), state.begin() + shared->offset_variable_I1);
    std::copy(shared->initial_I2.begin(), shared->initial_I2.end(), state.begin() + shared->offset_variable_I2);
    std::copy(shared->initial_I3.begin(), shared->initial_I3.end(), state.begin() + shared->offset_variable_I3);
    std::copy(shared->initial_I4.begin(), shared->initial_I4.end(), state.begin() + shared->offset_variable_I4);
    std::copy(shared->initial_R1.begin(), shared->initial_R1.end(), state.begin() + shared->offset_variable_R1);
    std::copy(shared->initial_R2.begin(), shared->initial_R2.end(), state.begin() + shared->offset_variable_R2);
    std::copy(shared->initial_R3.begin(), shared->initial_R3.end(), state.begin() + shared->offset_variable_R3);
    std::copy(shared->initial_R4.begin(), shared->initial_R4.end(), state.begin() + shared->offset_variable_R4);
    std::copy(shared->initial_I21.begin(), shared->initial_I21.end(), state.begin() + shared->offset_variable_I21);
    std::copy(shared->initial_I31.begin(), shared->initial_I31.end(), state.begin() + shared->offset_variable_I31);
    std::copy(shared->initial_I41.begin(), shared->initial_I41.end(), state.begin() + shared->offset_variable_I41);
    std::copy(shared->initial_I12.begin(), shared->initial_I12.end(), state.begin() + shared->offset_variable_I12);
    std::copy(shared->initial_I32.begin(), shared->initial_I32.end(), state.begin() + shared->offset_variable_I32);
    std::copy(shared->initial_I42.begin(), shared->initial_I42.end(), state.begin() + shared->offset_variable_I42);
    std::copy(shared->initial_I13.begin(), shared->initial_I13.end(), state.begin() + shared->offset_variable_I13);
    std::copy(shared->initial_I23.begin(), shared->initial_I23.end(), state.begin() + shared->offset_variable_I23);
    std::copy(shared->initial_I43.begin(), shared->initial_I43.end(), state.begin() + shared->offset_variable_I43);
    std::copy(shared->initial_I14.begin(), shared->initial_I14.end(), state.begin() + shared->offset_variable_I14);
    std::copy(shared->initial_I24.begin(), shared->initial_I24.end(), state.begin() + shared->offset_variable_I24);
    std::copy(shared->initial_I34.begin(), shared->initial_I34.end(), state.begin() + shared->offset_variable_I34);
    std::copy(shared->initial_R12.begin(), shared->initial_R12.end(), state.begin() + shared->offset_variable_R12);
    std::copy(shared->initial_R13.begin(), shared->initial_R13.end(), state.begin() + shared->offset_variable_R13);
    std::copy(shared->initial_R14.begin(), shared->initial_R14.end(), state.begin() + shared->offset_variable_R14);
    std::copy(shared->initial_R23.begin(), shared->initial_R23.end(), state.begin() + shared->offset_variable_R23);
    std::copy(shared->initial_R24.begin(), shared->initial_R24.end(), state.begin() + shared->offset_variable_R24);
    std::copy(shared->initial_R34.begin(), shared->initial_R34.end(), state.begin() + shared->offset_variable_R34);
    std::copy(shared->initial_I231.begin(), shared->initial_I231.end(), state.begin() + shared->offset_variable_I231);
    std::copy(shared->initial_I241.begin(), shared->initial_I241.end(), state.begin() + shared->offset_variable_I241);
    std::copy(shared->initial_I341.begin(), shared->initial_I341.end(), state.begin() + shared->offset_variable_I341);
    std::copy(shared->initial_I132.begin(), shared->initial_I132.end(), state.begin() + shared->offset_variable_I132);
    std::copy(shared->initial_I142.begin(), shared->initial_I142.end(), state.begin() + shared->offset_variable_I142);
    std::copy(shared->initial_I342.begin(), shared->initial_I342.end(), state.begin() + shared->offset_variable_I342);
    std::copy(shared->initial_I123.begin(), shared->initial_I123.end(), state.begin() + shared->offset_variable_I123);
    std::copy(shared->initial_I143.begin(), shared->initial_I143.end(), state.begin() + shared->offset_variable_I143);
    std::copy(shared->initial_I243.begin(), shared->initial_I243.end(), state.begin() + shared->offset_variable_I243);
    std::copy(shared->initial_I124.begin(), shared->initial_I124.end(), state.begin() + shared->offset_variable_I124);
    std::copy(shared->initial_I134.begin(), shared->initial_I134.end(), state.begin() + shared->offset_variable_I134);
    std::copy(shared->initial_I234.begin(), shared->initial_I234.end(), state.begin() + shared->offset_variable_I234);
    std::copy(shared->initial_R123.begin(), shared->initial_R123.end(), state.begin() + shared->offset_variable_R123);
    std::copy(shared->initial_R124.begin(), shared->initial_R124.end(), state.begin() + shared->offset_variable_R124);
    std::copy(shared->initial_R134.begin(), shared->initial_R134.end(), state.begin() + shared->offset_variable_R134);
    std::copy(shared->initial_R234.begin(), shared->initial_R234.end(), state.begin() + shared->offset_variable_R234);
    std::copy(shared->initial_I2341.begin(), shared->initial_I2341.end(), state.begin() + shared->offset_variable_I2341);
    std::copy(shared->initial_I1342.begin(), shared->initial_I1342.end(), state.begin() + shared->offset_variable_I1342);
    std::copy(shared->initial_I1243.begin(), shared->initial_I1243.end(), state.begin() + shared->offset_variable_I1243);
    std::copy(shared->initial_I1234.begin(), shared->initial_I1234.end(), state.begin() + shared->offset_variable_I1234);
    std::copy(shared->initial_R1234.begin(), shared->initial_R1234.end(), state.begin() + shared->offset_variable_R1234);
    std::copy(shared->initial_Ntotal_out.begin(), shared->initial_Ntotal_out.end(), state.begin() + shared->offset_variable_Ntotal_out);
    std::copy(shared->initial_out_disease_cur_week.begin(), shared->initial_out_disease_cur_week.end(), state.begin() + shared->offset_variable_out_disease_cur_week);
    std::copy(shared->initial_out_disease_tot.begin(), shared->initial_out_disease_tot.end(), state.begin() + shared->offset_variable_out_disease_tot);
    std::copy(shared->initial_out_disease_age.begin(), shared->initial_out_disease_age.end(), state.begin() + shared->offset_variable_out_disease_age);
    std::copy(shared->initial_out_disease_isowk.begin(), shared->initial_out_disease_isowk.end(), state.begin() + shared->offset_variable_out_disease_isowk);
    std::copy(shared->initial_out_disease_tot_yr.begin(), shared->initial_out_disease_tot_yr.end(), state.begin() + shared->offset_variable_out_disease_tot_yr);
    std::copy(shared->initial_out_seronegative.begin(), shared->initial_out_seronegative.end(), state.begin() + shared->offset_variable_out_seronegative);
    return state;
  }
  void update(size_t step, const real_type * state, rng_state_type& rng_state, real_type * state_next) {
    const real_type DATA_DAY = state[2];
    const real_type accum_rain = state[5];
    const real_type Lwt = state[7];
    const real_type Mwt_S = state[8];
    const real_type Mwt_E1 = state[9];
    const real_type Mwt_E2 = state[10];
    const real_type Mwt_E3 = state[11];
    const real_type Mwt_E4 = state[12];
    const real_type Mwt_I1 = state[13];
    const real_type Mwt_I2 = state[14];
    const real_type Mwt_I3 = state[15];
    const real_type Mwt_I4 = state[16];
    const real_type exposed1 = state[30];
    const real_type exposed2 = state[31];
    const real_type exposed3 = state[32];
    const real_type exposed4 = state[33];
    const real_type infectious1 = state[34];
    const real_type infectious2 = state[35];
    const real_type infectious3 = state[36];
    const real_type infectious4 = state[37];
    const real_type inc_FOI1 = state[38];
    const real_type inc_FOI2 = state[39];
    const real_type inc_FOI3 = state[40];
    const real_type inc_FOI4 = state[41];
    const real_type tot_inc_FOI = state[42];
    const real_type * out_disease_cur_week = state + shared->offset_variable_out_disease_cur_week;
    const real_type * out_disease_tot = state + shared->offset_variable_out_disease_tot;
    const real_type * out_disease_age = state + shared->offset_variable_out_disease_age;
    const real_type * out_disease_isowk = state + shared->offset_variable_out_disease_isowk;
    const real_type * out_disease_tot_yr = state + shared->offset_variable_out_disease_tot_yr;
    const real_type * out_seronegative = state + shared->offset_variable_out_seronegative;
    const real_type * S = state + 44;
    const real_type * I1 = state + shared->offset_variable_I1;
    const real_type * I2 = state + shared->offset_variable_I2;
    const real_type * I3 = state + shared->offset_variable_I3;
    const real_type * I4 = state + shared->offset_variable_I4;
    const real_type * R1 = state + shared->offset_variable_R1;
    const real_type * R2 = state + shared->offset_variable_R2;
    const real_type * R3 = state + shared->offset_variable_R3;
    const real_type * R4 = state + shared->offset_variable_R4;
    const real_type * I12 = state + shared->offset_variable_I12;
    const real_type * I13 = state + shared->offset_variable_I13;
    const real_type * I14 = state + shared->offset_variable_I14;
    const real_type * I21 = state + shared->offset_variable_I21;
    const real_type * I23 = state + shared->offset_variable_I23;
    const real_type * I24 = state + shared->offset_variable_I24;
    const real_type * I31 = state + shared->offset_variable_I31;
    const real_type * I32 = state + shared->offset_variable_I32;
    const real_type * I34 = state + shared->offset_variable_I34;
    const real_type * I41 = state + shared->offset_variable_I41;
    const real_type * I42 = state + shared->offset_variable_I42;
    const real_type * I43 = state + shared->offset_variable_I43;
    const real_type * R12 = state + shared->offset_variable_R12;
    const real_type * R13 = state + shared->offset_variable_R13;
    const real_type * R14 = state + shared->offset_variable_R14;
    const real_type * R23 = state + shared->offset_variable_R23;
    const real_type * R24 = state + shared->offset_variable_R24;
    const real_type * R34 = state + shared->offset_variable_R34;
    const real_type * I123 = state + shared->offset_variable_I123;
    const real_type * I124 = state + shared->offset_variable_I124;
    const real_type * I132 = state + shared->offset_variable_I132;
    const real_type * I134 = state + shared->offset_variable_I134;
    const real_type * I142 = state + shared->offset_variable_I142;
    const real_type * I143 = state + shared->offset_variable_I143;
    const real_type * I231 = state + shared->offset_variable_I231;
    const real_type * I234 = state + shared->offset_variable_I234;
    const real_type * I241 = state + shared->offset_variable_I241;
    const real_type * I243 = state + shared->offset_variable_I243;
    const real_type * I341 = state + shared->offset_variable_I341;
    const real_type * I342 = state + shared->offset_variable_I342;
    const real_type * R123 = state + shared->offset_variable_R123;
    const real_type * R124 = state + shared->offset_variable_R124;
    const real_type * R134 = state + shared->offset_variable_R134;
    const real_type * R234 = state + shared->offset_variable_R234;
    const real_type * I1234 = state + shared->offset_variable_I1234;
    const real_type * I1243 = state + shared->offset_variable_I1243;
    const real_type * I1342 = state + shared->offset_variable_I1342;
    const real_type * I2341 = state + shared->offset_variable_I2341;
    const real_type * R1234 = state + shared->offset_variable_R1234;
    real_type cur_data_day = dust::math::floor(DATA_DAY);
    real_type Mwt_tot = Mwt_S + Mwt_E1 + Mwt_E2 + Mwt_E3 + Mwt_E4 + Mwt_I1 + Mwt_I2 + Mwt_I3 + Mwt_I4;
    real_type TIME = step * shared->DT;
    state_next[34] = infectious1 * (1 - shared->DT / (real_type) shared->inf_per) + exposed1 * shared->DT / (real_type) shared->incub;
    state_next[35] = infectious2 * (1 - shared->DT / (real_type) shared->inf_per) + exposed2 * shared->DT / (real_type) shared->incub;
    state_next[36] = infectious3 * (1 - shared->DT / (real_type) shared->inf_per) + exposed3 * shared->DT / (real_type) shared->incub;
    state_next[37] = infectious4 * (1 - shared->DT / (real_type) shared->inf_per) + exposed4 * shared->DT / (real_type) shared->incub;
    real_type agerts = (dust::math::floor(TIME / (real_type) shared->age_per) == TIME / (real_type) shared->age_per ? shared->age_per / (real_type) shared->YL : 0);
    real_type cur_data_week = dust::math::floor(cur_data_day / (real_type) 7) + 1;
    real_type Lwt_birth = shared->DT * shared->gamma * Mwt_tot;
    real_type Kc = shared->Kc_mean * accum_rain / (real_type) shared->accum_rain_eq;
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.Ntotal[i - 1] = S[i - 1] + I1[i - 1] + I2[i - 1] + I3[i - 1] + I4[i - 1] + R1[i - 1] + R2[i - 1] + R3[i - 1] + R4[i - 1] + I21[i - 1] + I31[i - 1] + I41[i - 1] + I12[i - 1] + I32[i - 1] + I42[i - 1] + I13[i - 1] + I23[i - 1] + I43[i - 1] + I14[i - 1] + I24[i - 1] + I34[i - 1] + R12[i - 1] + R13[i - 1] + R14[i - 1] + R23[i - 1] + R24[i - 1] + R34[i - 1] + I231[i - 1] + I241[i - 1] + I341[i - 1] + I132[i - 1] + I142[i - 1] + I342[i - 1] + I123[i - 1] + I143[i - 1] + I243[i - 1] + I124[i - 1] + I134[i - 1] + I234[i - 1] + R123[i - 1] + R124[i - 1] + R134[i - 1] + R234[i - 1] + I2341[i - 1] + I1342[i - 1] + I1243[i - 1] + I1234[i - 1] + R1234[i - 1];
    }
    real_type cur_clim_day = dust::math::floor(TIME * shared->DT) - shared->rel_first_clim_day;
    real_type CUR_DOW = (fmodr<real_type>((dust::math::floor(shared->DOW_START + TIME) - 1), 7)) + 1;
    real_type NT = odin_sum1<real_type>(internal.Ntotal.data(), 0, shared->dim_Ntotal);
    real_type TIME_OFFSET = TIME + shared->YEAR_OFFSET * shared->YL / (real_type) shared->DT;
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_Ntotal_out + i - 1] = internal.Ntotal[i - 1];
    }
    real_type DATA_DOW = (fmodr<real_type>((CUR_DOW - 1 + shared->DATA_REPORTING_DELAY), 7)) + 1;
    real_type FOUR_YEARS = dust::math::floor((TIME_OFFSET) * shared->DT / (real_type) shared->DAYS_IN_4Y);
    real_type L_deathrt = shared->DT * shared->sigma * ((1 + dust::math::pow<real_type>((Lwt / (real_type) (Kc * NT)), shared->omega)));
    real_type norm_rel_clim_day = fmodr<real_type>((cur_clim_day + shared->REPEAT_CLIM_4YEARS * shared->DAYS_IN_4Y * 25), (shared->REPEAT_CLIM_4YEARS * shared->DAYS_IN_4Y));
    real_type norm_rel_clim_end_day = shared->max_clim_day - shared->REPEAT_CLIM_4YEARS * shared->DAYS_IN_4Y + fmodr<real_type>((cur_clim_day - shared->max_clim_day), (shared->REPEAT_CLIM_4YEARS * shared->DAYS_IN_4Y));
    state_next[25] = NT;
    state_next[4] = cur_clim_day;
    state_next[0] = CUR_DOW;
    state_next[24] = Mwt_tot / (real_type) NT;
    real_type clim_row = (cur_clim_day < 0 ? norm_rel_clim_day : (cur_clim_day >= shared->max_clim_day ? norm_rel_clim_end_day : cur_clim_day));
    real_type DAYS_AFTER_4Y = TIME_OFFSET * shared->DT - FOUR_YEARS * shared->DAYS_IN_4Y;
    real_type O_Lwt = (1 - dust::math::exp(- (shared->DT * shared->epsilon + L_deathrt))) * (Lwt);
    real_type Lwt_mature = (shared->DT * shared->epsilon / (real_type) (shared->DT * shared->epsilon + L_deathrt)) * (O_Lwt);
    real_type rainfall = shared->climate_d[shared->dim_climate_d_1 * 1 + static_cast<int>(clim_row + 1) - 1] * shared->DT;
    real_type temperature = shared->climate_d[shared->dim_climate_d_1 * 0 + static_cast<int>(clim_row + 1) - 1];
    state_next[7] = Lwt_birth + Lwt - O_Lwt;
    real_type YEAR = FOUR_YEARS * 4 + ((DAYS_AFTER_4Y < 366 ? DAYS_AFTER_4Y / (real_type) 366 : 1 + (DAYS_AFTER_4Y - 366) / (real_type) 365)) - shared->YEAR_OFFSET;
    real_type Beta_temperature = (temperature <= shared->Beta_T0 || temperature >= shared->Beta_Tm ? 0 : (shared->Beta_norm * (dust::math::pow<real_type>((temperature - shared->Beta_T0), shared->Beta_pT0)) * (dust::math::pow<real_type>((shared->Beta_Tm - temperature), shared->Beta_pTm))));
    real_type CALENDAR_YEAR = shared->START_YEAR + YEAR;
    real_type delta_temperature = (temperature <= shared->delta_T0 || temperature >= shared->delta_Tm ? 0 : shared->delta_norm * (dust::math::pow<real_type>((temperature - shared->delta_T0), shared->delta_pT0)) * (dust::math::pow<real_type>((shared->delta_Tm - temperature), shared->delta_pTm)));
    real_type rain_norm = rainfall / (real_type) shared->rainfall_mean;
    real_type rel_year = YEAR - shared->EQUILIB_YEARS;
    state_next[6] = shared->R0agescale;
    state_next[21] = temperature;
    real_type Beta_hm = shared->Beta_hm_max * Beta_temperature;
    real_type Beta_multiplier = (CALENDAR_YEAR > shared->COVID_START && CALENDAR_YEAR < shared->COVID_STOP ? shared->COVID_trans_level : 1);
    real_type change_accum_rain = dust::math::exp(- (1 + rain_norm / (real_type) shared->sat_rain + (rain_norm * rain_norm) / (real_type) (shared->max_rain * shared->max_rain)) * shared->DT / (real_type) shared->tau_rain);
    real_type delta = 1 / (real_type) (1 / (real_type) shared->delta_max + delta_temperature * (1 / (real_type) shared->delta_p - 1 / (real_type) shared->delta_max));
    real_type ORDINAL_YEAR = dust::math::floor(CALENDAR_YEAR + static_cast<real_type>(0.0001));
    state_next[1] = CALENDAR_YEAR;
    real_type year_row = 1 + ((rel_year < 0 ? 0 : (rel_year > shared->max_rel_year ? shared->max_rel_year : dust::math::floor(rel_year))));
    real_type Beta_hm_1 = Beta_hm * shared->Rel_R01;
    real_type Beta_hm_2 = Beta_hm * shared->Rel_R02;
    real_type Beta_hm_3 = Beta_hm * shared->Rel_R03;
    real_type Beta_hm_4 = Beta_hm * shared->Rel_R04;
    real_type Beta_mh = shared->Beta_mh_max * Beta_temperature * Beta_multiplier;
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.cur_age_rate[i - 1] = shared->age_rate_d[shared->dim_age_rate_d_1 * (1 + i - 1) + static_cast<int>(year_row) - 1];
    }
    real_type CUR_YEAR_LENGTH = (fmodr<real_type>(ORDINAL_YEAR, 4) == 0 ? 366 : 365);
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.death[i - 1] = shared->age_removal_d[shared->dim_age_removal_d_1 * (1 + i - 1) + static_cast<int>(year_row) - 1];
    }
    {
       int i = 1;
       internal.death[i - 1] = static_cast<real_type>(0.46910000000000002) * internal.death[0] * internal.death[0] + static_cast<real_type>(1.9685999999999999) * internal.death[0];
    }
    real_type Nb = shared->births_d[shared->dim_births_d_1 * 1 + static_cast<int>(year_row) - 1];
    real_type O_Mwt_E1 = (shared->DT * (delta + 1 / (real_type) shared->eip)) * (Mwt_E1);
    real_type O_Mwt_E2 = (shared->DT * (delta + 1 / (real_type) shared->eip)) * (Mwt_E2);
    real_type O_Mwt_E3 = (shared->DT * (delta + 1 / (real_type) shared->eip)) * (Mwt_E3);
    real_type O_Mwt_E4 = (shared->DT * (delta + 1 / (real_type) shared->eip)) * (Mwt_E4);
    state_next[5] = (accum_rain + shared->DT * rain_norm / (real_type) shared->tau_rain) * change_accum_rain;
    state_next[22] = delta;
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.agert[i - 1] = internal.cur_age_rate[i - 1] * agerts;
    }
    real_type births = shared->pop_scale * Nb * shared->DT / (real_type) shared->YL;
    real_type DAY_OF_YEAR = dust::math::floor((CALENDAR_YEAR - ORDINAL_YEAR) * CUR_YEAR_LENGTH + static_cast<real_type>(0.25));
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.deathrt[i - 1] = internal.death[i - 1] / (real_type) shared->YL * shared->DT;
    }
    real_type FOI1 = shared->DT * Beta_mh * shared->kappa * Mwt_I1 / (real_type) NT + shared->extInfRand;
    real_type FOI2 = shared->DT * Beta_mh * shared->kappa * Mwt_I2 / (real_type) NT + shared->extInfRand;
    real_type FOI3 = shared->DT * Beta_mh * shared->kappa * Mwt_I3 / (real_type) NT + shared->extInfRand;
    real_type FOI4 = shared->DT * Beta_mh * shared->kappa * Mwt_I4 / (real_type) NT + shared->extInfRand;
    real_type Mwt_E1_incub = (1 / (real_type) (delta * shared->eip + 1)) * (O_Mwt_E1);
    real_type Mwt_E2_incub = (1 / (real_type) (delta * shared->eip + 1)) * (O_Mwt_E2);
    real_type Mwt_E3_incub = (1 / (real_type) (delta * shared->eip + 1)) * (O_Mwt_E3);
    real_type Mwt_E4_incub = (1 / (real_type) (delta * shared->eip + 1)) * (O_Mwt_E4);
    real_type Mwt_FOI1 = shared->DT * Beta_hm_1 * shared->kappa * infectious1;
    real_type Mwt_FOI2 = shared->DT * Beta_hm_2 * shared->kappa * infectious2;
    real_type Mwt_FOI3 = shared->DT * Beta_hm_3 * shared->kappa * infectious3;
    real_type Mwt_FOI4 = shared->DT * Beta_hm_4 * shared->kappa * infectious4;
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.seroneg[i - 1] = S[i - 1] / (real_type) internal.Ntotal[i - 1] * shared->DT / (real_type) CUR_YEAR_LENGTH;
    }
    state_next[23] = Beta_mh;
    state_next[17] = shared->kappa * shared->kappa * (Mwt_tot) * Beta_hm_1 * shared->inf_per * Beta_mh / (real_type) (1 + delta * shared->eip) / (real_type) delta / (real_type) NT / (real_type) shared->R0agescale;
    state_next[18] = shared->kappa * shared->kappa * (Mwt_tot) * Beta_hm_2 * shared->inf_per * Beta_mh / (real_type) (1 + delta * shared->eip) / (real_type) delta / (real_type) NT / (real_type) shared->R0agescale;
    state_next[19] = shared->kappa * shared->kappa * (Mwt_tot) * Beta_hm_3 * shared->inf_per * Beta_mh / (real_type) (1 + delta * shared->eip) / (real_type) delta / (real_type) NT / (real_type) shared->R0agescale;
    state_next[20] = shared->kappa * shared->kappa * (Mwt_tot) * Beta_hm_4 * shared->inf_per * Beta_mh / (real_type) (1 + delta * shared->eip) / (real_type) delta / (real_type) NT / (real_type) shared->R0agescale;
    real_type DATA_DAY_OF_YEAR0 = DAY_OF_YEAR + shared->DATA_REPORTING_DELAY;
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.FOI1a[i - 1] = shared->FOIas[i - 1] * FOI1;
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.FOI2a[i - 1] = shared->FOIas[i - 1] * FOI2;
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.FOI3a[i - 1] = shared->FOIas[i - 1] * FOI3;
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.FOI4a[i - 1] = shared->FOIas[i - 1] * FOI4;
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I1[i - 1] = dust::random::binomial<real_type>(rng_state, (I1[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I12[i - 1] = dust::random::binomial<real_type>(rng_state, (I12[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I123[i - 1] = dust::random::binomial<real_type>(rng_state, (I123[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I1234[i - 1] = dust::random::binomial<real_type>(rng_state, (I1234[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I124[i - 1] = dust::random::binomial<real_type>(rng_state, (I124[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I1243[i - 1] = dust::random::binomial<real_type>(rng_state, (I1243[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I13[i - 1] = dust::random::binomial<real_type>(rng_state, (I13[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I132[i - 1] = dust::random::binomial<real_type>(rng_state, (I132[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I134[i - 1] = dust::random::binomial<real_type>(rng_state, (I134[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I1342[i - 1] = dust::random::binomial<real_type>(rng_state, (I1342[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I14[i - 1] = dust::random::binomial<real_type>(rng_state, (I14[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I142[i - 1] = dust::random::binomial<real_type>(rng_state, (I142[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I143[i - 1] = dust::random::binomial<real_type>(rng_state, (I143[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I2[i - 1] = dust::random::binomial<real_type>(rng_state, (I2[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I21[i - 1] = dust::random::binomial<real_type>(rng_state, (I21[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I23[i - 1] = dust::random::binomial<real_type>(rng_state, (I23[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I231[i - 1] = dust::random::binomial<real_type>(rng_state, (I231[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I234[i - 1] = dust::random::binomial<real_type>(rng_state, (I234[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I2341[i - 1] = dust::random::binomial<real_type>(rng_state, (I2341[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I24[i - 1] = dust::random::binomial<real_type>(rng_state, (I24[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I241[i - 1] = dust::random::binomial<real_type>(rng_state, (I241[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I243[i - 1] = dust::random::binomial<real_type>(rng_state, (I243[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I3[i - 1] = dust::random::binomial<real_type>(rng_state, (I3[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I31[i - 1] = dust::random::binomial<real_type>(rng_state, (I31[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I32[i - 1] = dust::random::binomial<real_type>(rng_state, (I32[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I34[i - 1] = dust::random::binomial<real_type>(rng_state, (I34[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I341[i - 1] = dust::random::binomial<real_type>(rng_state, (I341[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I342[i - 1] = dust::random::binomial<real_type>(rng_state, (I342[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I4[i - 1] = dust::random::binomial<real_type>(rng_state, (I4[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I41[i - 1] = dust::random::binomial<real_type>(rng_state, (I41[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I42[i - 1] = dust::random::binomial<real_type>(rng_state, (I42[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_I43[i - 1] = dust::random::binomial<real_type>(rng_state, (I43[i - 1]), (shared->nu + internal.deathrt[i - 1]));
    }
    real_type O_Mwt_S = (shared->DT * delta + Mwt_FOI1 + Mwt_FOI2 + Mwt_FOI3 + Mwt_FOI4) * (Mwt_S);
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_R1234[i - 1] = dust::random::binomial<real_type>(rng_state, (R1234[i - 1]), (internal.deathrt[i - 1]));
    }
    state_next[43] = FOI1 + FOI2 + FOI3 + FOI4;
    state_next[38] = inc_FOI1 + FOI1;
    state_next[39] = inc_FOI2 + FOI2;
    state_next[40] = inc_FOI3 + FOI3;
    state_next[41] = inc_FOI4 + FOI4;
    state_next[13] = Mwt_E1_incub + Mwt_I1 - (shared->DT * delta) * (Mwt_I1);
    state_next[14] = Mwt_E2_incub + Mwt_I2 - (shared->DT * delta) * (Mwt_I2);
    state_next[15] = Mwt_E3_incub + Mwt_I3 - (shared->DT * delta) * (Mwt_I3);
    state_next[16] = Mwt_E4_incub + Mwt_I4 - (shared->DT * delta) * (Mwt_I4);
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_out_seronegative + i - 1] = out_seronegative[i - 1] + ((ORDINAL_YEAR == shared->DATA_SERO_YEAR ? internal.seroneg[i - 1] : 0));
    }
    state_next[42] = ((shared->NUM_YEAR_ACCUM * dust::math::floor(YEAR / (real_type) shared->NUM_YEAR_ACCUM) == YEAR ? 0 : tot_inc_FOI)) + FOI1 + FOI2 + FOI3 + FOI4;
    real_type DATA_DAY_OF_YEAR = (DATA_DAY_OF_YEAR0 > CUR_YEAR_LENGTH ? DATA_DAY_OF_YEAR0 - CUR_YEAR_LENGTH : DATA_DAY_OF_YEAR0);
    real_type DATA_YEAR = (DATA_DAY_OF_YEAR0 > CUR_YEAR_LENGTH ? ORDINAL_YEAR + 1 : ORDINAL_YEAR);
    real_type Mwt_inf1 = (Mwt_FOI1 / (real_type) (shared->DT * delta + Mwt_FOI1 + Mwt_FOI2 + Mwt_FOI3 + Mwt_FOI4)) * (O_Mwt_S);
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_R1[i - 1] = dust::random::binomial<real_type>(rng_state, (R1[i - 1]), (shared->rho_sec * internal.FOI2a[i - 1] + shared->rho_sec * internal.FOI3a[i - 1] + shared->rho_sec * internal.FOI4a[i - 1] + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_R12[i - 1] = dust::random::binomial<real_type>(rng_state, (R12[i - 1]), (shared->rho_tert * internal.FOI3a[i - 1] + shared->rho_tert * internal.FOI4a[i - 1] + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_R123[i - 1] = dust::random::binomial<real_type>(rng_state, (R123[i - 1]), (shared->rho_quart * internal.FOI4a[i - 1] + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_R124[i - 1] = dust::random::binomial<real_type>(rng_state, (R124[i - 1]), (shared->rho_quart * internal.FOI3a[i - 1] + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_R13[i - 1] = dust::random::binomial<real_type>(rng_state, (R13[i - 1]), (shared->rho_tert * internal.FOI2a[i - 1] + shared->rho_tert * internal.FOI4a[i - 1] + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_R134[i - 1] = dust::random::binomial<real_type>(rng_state, (R134[i - 1]), (shared->rho_quart * internal.FOI2a[i - 1] + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_R14[i - 1] = dust::random::binomial<real_type>(rng_state, (R14[i - 1]), (shared->rho_tert * internal.FOI2a[i - 1] + shared->rho_tert * internal.FOI3a[i - 1] + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_R2[i - 1] = dust::random::binomial<real_type>(rng_state, (R2[i - 1]), (shared->rho_sec * internal.FOI1a[i - 1] + shared->rho_sec * internal.FOI3a[i - 1] + shared->rho_sec * internal.FOI4a[i - 1] + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_R23[i - 1] = dust::random::binomial<real_type>(rng_state, (R23[i - 1]), (shared->rho_tert * internal.FOI1a[i - 1] + shared->rho_tert * internal.FOI4a[i - 1] + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_R234[i - 1] = dust::random::binomial<real_type>(rng_state, (R234[i - 1]), (shared->rho_quart * internal.FOI1a[i - 1] + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_R24[i - 1] = dust::random::binomial<real_type>(rng_state, (R24[i - 1]), (shared->rho_tert * internal.FOI1a[i - 1] + shared->rho_tert * internal.FOI3a[i - 1] + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_R3[i - 1] = dust::random::binomial<real_type>(rng_state, (R3[i - 1]), (shared->rho_sec * internal.FOI1a[i - 1] + shared->rho_sec * internal.FOI2a[i - 1] + shared->rho_sec * internal.FOI4a[i - 1] + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_R34[i - 1] = dust::random::binomial<real_type>(rng_state, (R34[i - 1]), (shared->rho_tert * internal.FOI1a[i - 1] + shared->rho_tert * internal.FOI2a[i - 1] + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_R4[i - 1] = dust::random::binomial<real_type>(rng_state, (R4[i - 1]), (shared->rho_sec * internal.FOI1a[i - 1] + shared->rho_sec * internal.FOI2a[i - 1] + shared->rho_sec * internal.FOI3a[i - 1] + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.O_S[i - 1] = dust::random::binomial<real_type>(rng_state, (S[i - 1]), (shared->rho_pri * internal.FOI1a[i - 1] + shared->rho_pri * internal.FOI2a[i - 1] + shared->rho_pri * internal.FOI3a[i - 1] + shared->rho_pri * internal.FOI4a[i - 1] + internal.deathrt[i - 1]));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_1[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I1[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_12[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I12[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_123[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I123[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_1234[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I1234[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_124[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I124[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_1243[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I1243[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_13[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I13[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_132[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I132[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_134[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I134[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_1342[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I1342[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_14[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I14[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_142[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I142[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_143[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I143[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_2[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I2[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_21[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I21[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_23[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I23[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_231[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I231[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_234[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I234[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_2341[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I2341[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_24[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I24[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_241[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I241[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_243[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I243[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_3[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I3[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_31[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I31[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_32[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I32[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_34[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I34[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_341[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I341[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_342[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I342[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_4[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I4[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_41[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I41[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_42[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I42[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.recov_43[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_I43[i - 1]), (shared->nu / (real_type) (shared->nu + internal.deathrt[i - 1])));
    }
    state_next[8] = Lwt_mature + Mwt_S - O_Mwt_S;
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_R1[i - 1] = dust::random::binomial<real_type>(rng_state, (R1[i - 1 - 1] - internal.O_R1[i - 1 - 1] + internal.recov_1[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_R1[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_R12[i - 1] = dust::random::binomial<real_type>(rng_state, (R12[i - 1 - 1] - internal.O_R12[i - 1 - 1] + internal.recov_12[i - 1 - 1] + internal.recov_21[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_R12[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_R123[i - 1] = dust::random::binomial<real_type>(rng_state, (R123[i - 1 - 1] - internal.O_R123[i - 1 - 1] + internal.recov_123[i - 1 - 1] + internal.recov_132[i - 1 - 1] + internal.recov_231[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_R123[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_R1234[i - 1] = dust::random::binomial<real_type>(rng_state, (R1234[i - 1 - 1] - internal.O_R1234[i - 1 - 1] + internal.recov_1234[i - 1 - 1] + internal.recov_1243[i - 1 - 1] + internal.recov_1342[i - 1 - 1] + internal.recov_2341[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_R1234[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_R124[i - 1] = dust::random::binomial<real_type>(rng_state, (R124[i - 1 - 1] - internal.O_R124[i - 1 - 1] + internal.recov_124[i - 1 - 1] + internal.recov_142[i - 1 - 1] + internal.recov_241[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_R124[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_R13[i - 1] = dust::random::binomial<real_type>(rng_state, (R13[i - 1 - 1] - internal.O_R13[i - 1 - 1] + internal.recov_13[i - 1 - 1] + internal.recov_31[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_R13[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_R134[i - 1] = dust::random::binomial<real_type>(rng_state, (R134[i - 1 - 1] - internal.O_R134[i - 1 - 1] + internal.recov_134[i - 1 - 1] + internal.recov_143[i - 1 - 1] + internal.recov_341[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_R134[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_R14[i - 1] = dust::random::binomial<real_type>(rng_state, (R14[i - 1 - 1] - internal.O_R14[i - 1 - 1] + internal.recov_14[i - 1 - 1] + internal.recov_41[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_R14[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_R2[i - 1] = dust::random::binomial<real_type>(rng_state, (R2[i - 1 - 1] - internal.O_R2[i - 1 - 1] + internal.recov_2[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_R2[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_R23[i - 1] = dust::random::binomial<real_type>(rng_state, (R23[i - 1 - 1] - internal.O_R23[i - 1 - 1] + internal.recov_23[i - 1 - 1] + internal.recov_32[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_R23[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_R234[i - 1] = dust::random::binomial<real_type>(rng_state, (R234[i - 1 - 1] - internal.O_R234[i - 1 - 1] + internal.recov_234[i - 1 - 1] + internal.recov_243[i - 1 - 1] + internal.recov_342[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_R234[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_R24[i - 1] = dust::random::binomial<real_type>(rng_state, (R24[i - 1 - 1] - internal.O_R24[i - 1 - 1] + internal.recov_24[i - 1 - 1] + internal.recov_42[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_R24[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_R3[i - 1] = dust::random::binomial<real_type>(rng_state, (R3[i - 1 - 1] - internal.O_R3[i - 1 - 1] + internal.recov_3[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_R3[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_R34[i - 1] = dust::random::binomial<real_type>(rng_state, (R34[i - 1 - 1] - internal.O_R34[i - 1 - 1] + internal.recov_34[i - 1 - 1] + internal.recov_43[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_R34[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_R4[i - 1] = dust::random::binomial<real_type>(rng_state, (R4[i - 1 - 1] - internal.O_R4[i - 1 - 1] + internal.recov_4[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_R4[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_S[i - 1] = dust::random::binomial<real_type>(rng_state, S[i - 1 - 1] - internal.O_S[i - 1 - 1], internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_S[i - 1] = dust::random::binomial<real_type>(rng_state, 10000000, births / (real_type) 10000000);
    }
    real_type DATA_YEAR_LENGTH = (fmodr<real_type>(DATA_YEAR, 4) == 0 ? 366 : 365);
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_1[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_S[i - 1]), (shared->rho_pri * internal.FOI1a[i - 1] / (real_type) (shared->rho_pri * internal.FOI1a[i - 1] + shared->rho_pri * internal.FOI2a[i - 1] + shared->rho_pri * internal.FOI3a[i - 1] + shared->rho_pri * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_12[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R1[i - 1]), (shared->rho_sec * internal.FOI2a[i - 1] / (real_type) (shared->rho_sec * internal.FOI2a[i - 1] + shared->rho_sec * internal.FOI3a[i - 1] + shared->rho_sec * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_123[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R12[i - 1]), (shared->rho_tert * internal.FOI3a[i - 1] / (real_type) (shared->rho_tert * internal.FOI3a[i - 1] + shared->rho_tert * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_1234[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R123[i - 1]), (shared->rho_quart * internal.FOI4a[i - 1] / (real_type) (shared->rho_quart * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_1243[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R124[i - 1]), (shared->rho_quart * internal.FOI3a[i - 1] / (real_type) (shared->rho_quart * internal.FOI3a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_132[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R13[i - 1]), (shared->rho_tert * internal.FOI2a[i - 1] / (real_type) (shared->rho_tert * internal.FOI2a[i - 1] + shared->rho_tert * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_1342[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R134[i - 1]), (shared->rho_quart * internal.FOI2a[i - 1] / (real_type) (shared->rho_quart * internal.FOI2a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_142[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R14[i - 1]), (shared->rho_tert * internal.FOI2a[i - 1] / (real_type) (shared->rho_tert * internal.FOI2a[i - 1] + shared->rho_tert * internal.FOI3a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_21[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R2[i - 1]), (shared->rho_sec * internal.FOI1a[i - 1] / (real_type) (shared->rho_sec * internal.FOI1a[i - 1] + shared->rho_sec * internal.FOI3a[i - 1] + shared->rho_sec * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_231[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R23[i - 1]), (shared->rho_tert * internal.FOI1a[i - 1] / (real_type) (shared->rho_tert * internal.FOI1a[i - 1] + shared->rho_tert * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_2341[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R234[i - 1]), (shared->rho_quart * internal.FOI1a[i - 1] / (real_type) (shared->rho_quart * internal.FOI1a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_241[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R24[i - 1]), (shared->rho_tert * internal.FOI1a[i - 1] / (real_type) (shared->rho_tert * internal.FOI1a[i - 1] + shared->rho_tert * internal.FOI3a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_31[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R3[i - 1]), (shared->rho_sec * internal.FOI1a[i - 1] / (real_type) (shared->rho_sec * internal.FOI1a[i - 1] + shared->rho_sec * internal.FOI2a[i - 1] + shared->rho_sec * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_341[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R34[i - 1]), (shared->rho_tert * internal.FOI1a[i - 1] / (real_type) (shared->rho_tert * internal.FOI1a[i - 1] + shared->rho_tert * internal.FOI2a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_41[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R4[i - 1]), (shared->rho_sec * internal.FOI1a[i - 1] / (real_type) (shared->rho_sec * internal.FOI1a[i - 1] + shared->rho_sec * internal.FOI2a[i - 1] + shared->rho_sec * internal.FOI3a[i - 1] + internal.deathrt[i - 1])));
    }
    real_type LAST_DATA_YEAR_LENGTH = (fmodr<real_type>((DATA_YEAR - 1), 4) == 0 ? 366 : 365);
    real_type Mwt_inf2 = (Mwt_FOI2 / (real_type) (shared->DT * delta + Mwt_FOI2 + Mwt_FOI3 + Mwt_FOI4)) * (O_Mwt_S - Mwt_inf1);
    real_type THURS_DOY_IN_WEEK0 = 4 - DATA_DOW + DATA_DAY_OF_YEAR;
    state_next[9] = Mwt_inf1 + Mwt_E1 - O_Mwt_E1;
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I1[i - 1] = dust::random::binomial<real_type>(rng_state, (I1[i - 1 - 1] - internal.O_I1[i - 1 - 1] + internal.inf_1[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I1[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I12[i - 1] = dust::random::binomial<real_type>(rng_state, (I12[i - 1 - 1] - internal.O_I12[i - 1 - 1] + internal.inf_12[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I12[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I123[i - 1] = dust::random::binomial<real_type>(rng_state, (I123[i - 1 - 1] - internal.O_I123[i - 1 - 1] + internal.inf_123[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I123[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I1234[i - 1] = dust::random::binomial<real_type>(rng_state, (I1234[i - 1 - 1] - internal.O_I1234[i - 1 - 1] + internal.inf_1234[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I1234[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I1243[i - 1] = dust::random::binomial<real_type>(rng_state, (I1243[i - 1 - 1] - internal.O_I1243[i - 1 - 1] + internal.inf_1243[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I1243[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I132[i - 1] = dust::random::binomial<real_type>(rng_state, (I132[i - 1 - 1] - internal.O_I132[i - 1 - 1] + internal.inf_132[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I132[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I1342[i - 1] = dust::random::binomial<real_type>(rng_state, (I1342[i - 1 - 1] - internal.O_I1342[i - 1 - 1] + internal.inf_1342[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I1342[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I142[i - 1] = dust::random::binomial<real_type>(rng_state, (I142[i - 1 - 1] - internal.O_I142[i - 1 - 1] + internal.inf_142[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I142[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I21[i - 1] = dust::random::binomial<real_type>(rng_state, (I21[i - 1 - 1] - internal.O_I21[i - 1 - 1] + internal.inf_21[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I21[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I231[i - 1] = dust::random::binomial<real_type>(rng_state, (I231[i - 1 - 1] - internal.O_I231[i - 1 - 1] + internal.inf_231[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I231[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I2341[i - 1] = dust::random::binomial<real_type>(rng_state, (I2341[i - 1 - 1] - internal.O_I2341[i - 1 - 1] + internal.inf_2341[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I2341[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I241[i - 1] = dust::random::binomial<real_type>(rng_state, (I241[i - 1 - 1] - internal.O_I241[i - 1 - 1] + internal.inf_241[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I241[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I31[i - 1] = dust::random::binomial<real_type>(rng_state, (I31[i - 1 - 1] - internal.O_I31[i - 1 - 1] + internal.inf_31[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I31[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I341[i - 1] = dust::random::binomial<real_type>(rng_state, (I341[i - 1 - 1] - internal.O_I341[i - 1 - 1] + internal.inf_341[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I341[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I41[i - 1] = dust::random::binomial<real_type>(rng_state, (I41[i - 1 - 1] - internal.O_I41[i - 1 - 1] + internal.inf_41[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I41[i - 1] = 0;
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_124[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R12[i - 1] - internal.inf_123[i - 1]), (shared->rho_tert * internal.FOI4a[i - 1] / (real_type) (shared->rho_tert * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_13[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R1[i - 1] - internal.inf_12[i - 1]), (shared->rho_sec * internal.FOI3a[i - 1] / (real_type) (shared->rho_sec * internal.FOI3a[i - 1] + shared->rho_sec * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_134[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R13[i - 1] - internal.inf_132[i - 1]), (shared->rho_tert * internal.FOI4a[i - 1] / (real_type) (shared->rho_tert * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_143[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R14[i - 1] - internal.inf_142[i - 1]), (shared->rho_tert * internal.FOI3a[i - 1] / (real_type) (shared->rho_tert * internal.FOI3a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_2[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_S[i - 1] - internal.inf_1[i - 1]), (shared->rho_pri * internal.FOI2a[i - 1] / (real_type) (shared->rho_pri * internal.FOI2a[i - 1] + shared->rho_pri * internal.FOI3a[i - 1] + shared->rho_pri * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_23[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R2[i - 1] - internal.inf_21[i - 1]), (shared->rho_sec * internal.FOI3a[i - 1] / (real_type) (shared->rho_sec * internal.FOI3a[i - 1] + shared->rho_sec * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_234[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R23[i - 1] - internal.inf_231[i - 1]), (shared->rho_tert * internal.FOI4a[i - 1] / (real_type) (shared->rho_tert * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_243[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R24[i - 1] - internal.inf_241[i - 1]), (shared->rho_tert * internal.FOI3a[i - 1] / (real_type) (shared->rho_tert * internal.FOI3a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_32[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R3[i - 1] - internal.inf_31[i - 1]), (shared->rho_sec * internal.FOI2a[i - 1] / (real_type) (shared->rho_sec * internal.FOI2a[i - 1] + shared->rho_sec * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_342[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R34[i - 1] - internal.inf_341[i - 1]), (shared->rho_tert * internal.FOI2a[i - 1] / (real_type) (shared->rho_tert * internal.FOI2a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_42[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R4[i - 1] - internal.inf_41[i - 1]), (shared->rho_sec * internal.FOI2a[i - 1] / (real_type) (shared->rho_sec * internal.FOI2a[i - 1] + shared->rho_sec * internal.FOI3a[i - 1] + internal.deathrt[i - 1])));
    }
    real_type Mwt_inf3 = (Mwt_FOI3 / (real_type) (shared->DT * delta + Mwt_FOI3 + Mwt_FOI4)) * (O_Mwt_S - Mwt_inf1 - Mwt_inf2);
    real_type THURS_DOY_IN_WEEK = (THURS_DOY_IN_WEEK0 > DATA_YEAR_LENGTH ? (THURS_DOY_IN_WEEK0 - DATA_YEAR_LENGTH) : (THURS_DOY_IN_WEEK0 <= 0 ? (THURS_DOY_IN_WEEK0 + LAST_DATA_YEAR_LENGTH) : THURS_DOY_IN_WEEK0));
    state_next[10] = Mwt_inf2 + Mwt_E2 - O_Mwt_E2;
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_R1 + i - 1] = internal.age_R1[i - 1] + R1[i - 1] - internal.O_R1[i - 1] + internal.recov_1[i - 1] - internal.age_R1[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_R12 + i - 1] = internal.age_R12[i - 1] + R12[i - 1] - internal.O_R12[i - 1] + internal.recov_12[i - 1] + internal.recov_21[i - 1] - internal.age_R12[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_R123 + i - 1] = internal.age_R123[i - 1] + R123[i - 1] - internal.O_R123[i - 1] + internal.recov_123[i - 1] + internal.recov_132[i - 1] + internal.recov_231[i - 1] - internal.age_R123[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_R1234 + i - 1] = internal.age_R1234[i - 1] + R1234[i - 1] - internal.O_R1234[i - 1] + internal.recov_1234[i - 1] + internal.recov_1243[i - 1] + internal.recov_1342[i - 1] + internal.recov_2341[i - 1] - internal.age_R1234[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_R124 + i - 1] = internal.age_R124[i - 1] + R124[i - 1] - internal.O_R124[i - 1] + internal.recov_124[i - 1] + internal.recov_142[i - 1] + internal.recov_241[i - 1] - internal.age_R124[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_R13 + i - 1] = internal.age_R13[i - 1] + R13[i - 1] - internal.O_R13[i - 1] + internal.recov_13[i - 1] + internal.recov_31[i - 1] - internal.age_R13[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_R134 + i - 1] = internal.age_R134[i - 1] + R134[i - 1] - internal.O_R134[i - 1] + internal.recov_134[i - 1] + internal.recov_143[i - 1] + internal.recov_341[i - 1] - internal.age_R134[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_R14 + i - 1] = internal.age_R14[i - 1] + R14[i - 1] - internal.O_R14[i - 1] + internal.recov_14[i - 1] + internal.recov_41[i - 1] - internal.age_R14[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_R2 + i - 1] = internal.age_R2[i - 1] + R2[i - 1] - internal.O_R2[i - 1] + internal.recov_2[i - 1] - internal.age_R2[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_R23 + i - 1] = internal.age_R23[i - 1] + R23[i - 1] - internal.O_R23[i - 1] + internal.recov_23[i - 1] + internal.recov_32[i - 1] - internal.age_R23[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_R234 + i - 1] = internal.age_R234[i - 1] + R234[i - 1] - internal.O_R234[i - 1] + internal.recov_234[i - 1] + internal.recov_243[i - 1] + internal.recov_342[i - 1] - internal.age_R234[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_R24 + i - 1] = internal.age_R24[i - 1] + R24[i - 1] - internal.O_R24[i - 1] + internal.recov_24[i - 1] + internal.recov_42[i - 1] - internal.age_R24[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_R3 + i - 1] = internal.age_R3[i - 1] + R3[i - 1] - internal.O_R3[i - 1] + internal.recov_3[i - 1] - internal.age_R3[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_R34 + i - 1] = internal.age_R34[i - 1] + R34[i - 1] - internal.O_R34[i - 1] + internal.recov_34[i - 1] + internal.recov_43[i - 1] - internal.age_R34[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_R4 + i - 1] = internal.age_R4[i - 1] + R4[i - 1] - internal.O_R4[i - 1] + internal.recov_4[i - 1] - internal.age_R4[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[44 + i - 1] = internal.age_S[i - 1] + S[i - 1] - internal.O_S[i - 1] - internal.age_S[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.Y1[i - 1] = shared->phi_pri[0] * (1 + shared->dis_pri[0] * shared->phi_ed) * internal.inf_1[i - 1] + shared->phi_sec[0] * (1 + shared->dis_sec[0] * shared->phi_ed) * (internal.inf_21[i - 1] + internal.inf_31[i - 1] + internal.inf_41[i - 1]) + shared->phi_tert[0] * (1 + shared->dis_tert[0] * shared->phi_ed) * (internal.inf_231[i - 1] + internal.inf_241[i - 1] + internal.inf_341[i - 1]) + shared->phi_quart[0] * (1 + shared->dis_quart[0] * shared->phi_ed) * internal.inf_2341[i - 1];
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I124[i - 1] = dust::random::binomial<real_type>(rng_state, (I124[i - 1 - 1] - internal.O_I124[i - 1 - 1] + internal.inf_124[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I124[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I13[i - 1] = dust::random::binomial<real_type>(rng_state, (I13[i - 1 - 1] - internal.O_I13[i - 1 - 1] + internal.inf_13[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I13[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I134[i - 1] = dust::random::binomial<real_type>(rng_state, (I134[i - 1 - 1] - internal.O_I134[i - 1 - 1] + internal.inf_134[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I134[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I143[i - 1] = dust::random::binomial<real_type>(rng_state, (I143[i - 1 - 1] - internal.O_I143[i - 1 - 1] + internal.inf_143[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I143[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I2[i - 1] = dust::random::binomial<real_type>(rng_state, (I2[i - 1 - 1] - internal.O_I2[i - 1 - 1] + internal.inf_2[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I2[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I23[i - 1] = dust::random::binomial<real_type>(rng_state, (I23[i - 1 - 1] - internal.O_I23[i - 1 - 1] + internal.inf_23[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I23[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I234[i - 1] = dust::random::binomial<real_type>(rng_state, (I234[i - 1 - 1] - internal.O_I234[i - 1 - 1] + internal.inf_234[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I234[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I243[i - 1] = dust::random::binomial<real_type>(rng_state, (I243[i - 1 - 1] - internal.O_I243[i - 1 - 1] + internal.inf_243[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I243[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I32[i - 1] = dust::random::binomial<real_type>(rng_state, (I32[i - 1 - 1] - internal.O_I32[i - 1 - 1] + internal.inf_32[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I32[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I342[i - 1] = dust::random::binomial<real_type>(rng_state, (I342[i - 1 - 1] - internal.O_I342[i - 1 - 1] + internal.inf_342[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I342[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I42[i - 1] = dust::random::binomial<real_type>(rng_state, (I42[i - 1 - 1] - internal.O_I42[i - 1 - 1] + internal.inf_42[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I42[i - 1] = 0;
    }
    real_type CUR_ISO_WEEK = dust::math::floor((6 + THURS_DOY_IN_WEEK) / (real_type) 7);
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_14[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R1[i - 1] - internal.inf_12[i - 1] - internal.inf_13[i - 1]), (shared->rho_sec * internal.FOI4a[i - 1] / (real_type) (shared->rho_sec * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_24[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R2[i - 1] - internal.inf_21[i - 1] - internal.inf_23[i - 1]), (shared->rho_sec * internal.FOI4a[i - 1] / (real_type) (shared->rho_sec * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_3[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_S[i - 1] - internal.inf_1[i - 1] - internal.inf_2[i - 1]), (shared->rho_pri * internal.FOI3a[i - 1] / (real_type) (shared->rho_pri * internal.FOI3a[i - 1] + shared->rho_pri * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_34[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R3[i - 1] - internal.inf_31[i - 1] - internal.inf_32[i - 1]), (shared->rho_sec * internal.FOI4a[i - 1] / (real_type) (shared->rho_sec * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_43[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_R4[i - 1] - internal.inf_41[i - 1] - internal.inf_42[i - 1]), (shared->rho_sec * internal.FOI3a[i - 1] / (real_type) (shared->rho_sec * internal.FOI3a[i - 1] + internal.deathrt[i - 1])));
    }
    real_type Mwt_inf4 = (Mwt_FOI4 / (real_type) (shared->DT * delta + Mwt_FOI4)) * (O_Mwt_S - Mwt_inf1 - Mwt_inf2 - Mwt_inf3);
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I1 + i - 1] = internal.age_I1[i - 1] + I1[i - 1] - internal.O_I1[i - 1] + internal.inf_1[i - 1] - internal.age_I1[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I12 + i - 1] = internal.age_I12[i - 1] + I12[i - 1] - internal.O_I12[i - 1] + internal.inf_12[i - 1] - internal.age_I12[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I123 + i - 1] = internal.age_I123[i - 1] + I123[i - 1] - internal.O_I123[i - 1] + internal.inf_123[i - 1] - internal.age_I123[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I1234 + i - 1] = internal.age_I1234[i - 1] + I1234[i - 1] - internal.O_I1234[i - 1] + internal.inf_1234[i - 1] - internal.age_I1234[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I1243 + i - 1] = internal.age_I1243[i - 1] + I1243[i - 1] - internal.O_I1243[i - 1] + internal.inf_1243[i - 1] - internal.age_I1243[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I132 + i - 1] = internal.age_I132[i - 1] + I132[i - 1] - internal.O_I132[i - 1] + internal.inf_132[i - 1] - internal.age_I132[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I1342 + i - 1] = internal.age_I1342[i - 1] + I1342[i - 1] - internal.O_I1342[i - 1] + internal.inf_1342[i - 1] - internal.age_I1342[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I142 + i - 1] = internal.age_I142[i - 1] + I142[i - 1] - internal.O_I142[i - 1] + internal.inf_142[i - 1] - internal.age_I142[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I21 + i - 1] = internal.age_I21[i - 1] + I21[i - 1] - internal.O_I21[i - 1] + internal.inf_21[i - 1] - internal.age_I21[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I231 + i - 1] = internal.age_I231[i - 1] + I231[i - 1] - internal.O_I231[i - 1] + internal.inf_231[i - 1] - internal.age_I231[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I2341 + i - 1] = internal.age_I2341[i - 1] + I2341[i - 1] - internal.O_I2341[i - 1] + internal.inf_2341[i - 1] - internal.age_I2341[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I241 + i - 1] = internal.age_I241[i - 1] + I241[i - 1] - internal.O_I241[i - 1] + internal.inf_241[i - 1] - internal.age_I241[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I31 + i - 1] = internal.age_I31[i - 1] + I31[i - 1] - internal.O_I31[i - 1] + internal.inf_31[i - 1] - internal.age_I31[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I341 + i - 1] = internal.age_I341[i - 1] + I341[i - 1] - internal.O_I341[i - 1] + internal.inf_341[i - 1] - internal.age_I341[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I41 + i - 1] = internal.age_I41[i - 1] + I41[i - 1] - internal.O_I41[i - 1] + internal.inf_41[i - 1] - internal.age_I41[i + 1 - 1];
    }
    state_next[11] = Mwt_inf3 + Mwt_E3 - O_Mwt_E3;
    real_type Y1T = odin_sum1<real_type>(internal.Y1.data(), 0, shared->dim_Y1) / (real_type) NT;
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.Y2[i - 1] = shared->phi_pri[1] * (1 + shared->dis_pri[1] * shared->phi_ed) * internal.inf_2[i - 1] + shared->phi_sec[1] * (1 + shared->dis_sec[1] * shared->phi_ed) * (internal.inf_12[i - 1] + internal.inf_32[i - 1] + internal.inf_42[i - 1]) + shared->phi_tert[1] * (1 + shared->dis_tert[1] * shared->phi_ed) * (internal.inf_132[i - 1] + internal.inf_142[i - 1] + internal.inf_342[i - 1]) + shared->phi_quart[1] * (1 + shared->dis_quart[1] * shared->phi_ed) * internal.inf_1342[i - 1];
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I14[i - 1] = dust::random::binomial<real_type>(rng_state, (I14[i - 1 - 1] - internal.O_I14[i - 1 - 1] + internal.inf_14[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I14[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I24[i - 1] = dust::random::binomial<real_type>(rng_state, (I24[i - 1 - 1] - internal.O_I24[i - 1 - 1] + internal.inf_24[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I24[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I3[i - 1] = dust::random::binomial<real_type>(rng_state, (I3[i - 1 - 1] - internal.O_I3[i - 1 - 1] + internal.inf_3[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I3[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I34[i - 1] = dust::random::binomial<real_type>(rng_state, (I34[i - 1 - 1] - internal.O_I34[i - 1 - 1] + internal.inf_34[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I34[i - 1] = 0;
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I43[i - 1] = dust::random::binomial<real_type>(rng_state, (I43[i - 1 - 1] - internal.O_I43[i - 1 - 1] + internal.inf_43[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I43[i - 1] = 0;
    }
    real_type DATA_PERIOD_ACTIVE = ((DATA_YEAR >= shared->DATA_START_YEAR) && ((DATA_YEAR > shared->DATA_START_YEAR) || (DATA_DAY_OF_YEAR >= 4) || (CUR_ISO_WEEK == 1)) ? 1 : 0);
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.inf_4[i - 1] = dust::random::binomial<real_type>(rng_state, (internal.O_S[i - 1] - internal.inf_1[i - 1] - internal.inf_2[i - 1] - internal.inf_3[i - 1]), (shared->rho_pri * internal.FOI4a[i - 1] / (real_type) (shared->rho_pri * internal.FOI4a[i - 1] + internal.deathrt[i - 1])));
    }
    state_next[30] = exposed1 + Y1T - exposed1 * shared->DT / (real_type) shared->incub;
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I124 + i - 1] = internal.age_I124[i - 1] + I124[i - 1] - internal.O_I124[i - 1] + internal.inf_124[i - 1] - internal.age_I124[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I13 + i - 1] = internal.age_I13[i - 1] + I13[i - 1] - internal.O_I13[i - 1] + internal.inf_13[i - 1] - internal.age_I13[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I134 + i - 1] = internal.age_I134[i - 1] + I134[i - 1] - internal.O_I134[i - 1] + internal.inf_134[i - 1] - internal.age_I134[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I143 + i - 1] = internal.age_I143[i - 1] + I143[i - 1] - internal.O_I143[i - 1] + internal.inf_143[i - 1] - internal.age_I143[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I2 + i - 1] = internal.age_I2[i - 1] + I2[i - 1] - internal.O_I2[i - 1] + internal.inf_2[i - 1] - internal.age_I2[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I23 + i - 1] = internal.age_I23[i - 1] + I23[i - 1] - internal.O_I23[i - 1] + internal.inf_23[i - 1] - internal.age_I23[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I234 + i - 1] = internal.age_I234[i - 1] + I234[i - 1] - internal.O_I234[i - 1] + internal.inf_234[i - 1] - internal.age_I234[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I243 + i - 1] = internal.age_I243[i - 1] + I243[i - 1] - internal.O_I243[i - 1] + internal.inf_243[i - 1] - internal.age_I243[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I32 + i - 1] = internal.age_I32[i - 1] + I32[i - 1] - internal.O_I32[i - 1] + internal.inf_32[i - 1] - internal.age_I32[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I342 + i - 1] = internal.age_I342[i - 1] + I342[i - 1] - internal.O_I342[i - 1] + internal.inf_342[i - 1] - internal.age_I342[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I42 + i - 1] = internal.age_I42[i - 1] + I42[i - 1] - internal.O_I42[i - 1] + internal.inf_42[i - 1] - internal.age_I42[i + 1 - 1];
    }
    state_next[12] = Mwt_inf4 + Mwt_E4 - O_Mwt_E4;
    state_next[3] = CUR_ISO_WEEK;
    state_next[26] = Y1T;
    real_type Y2T = odin_sum1<real_type>(internal.Y2.data(), 0, shared->dim_Y2) / (real_type) NT;
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.Y3[i - 1] = shared->phi_pri[2] * (1 + shared->dis_pri[2] * shared->phi_ed) * internal.inf_3[i - 1] + shared->phi_sec[2] * (1 + shared->dis_sec[2] * shared->phi_ed) * (internal.inf_13[i - 1] + internal.inf_23[i - 1] + internal.inf_43[i - 1]) + shared->phi_tert[2] * (1 + shared->dis_tert[2] * shared->phi_ed) * (internal.inf_123[i - 1] + internal.inf_143[i - 1] + internal.inf_243[i - 1]) + shared->phi_quart[2] * (1 + shared->dis_quart[2] * shared->phi_ed) * internal.inf_1243[i - 1];
    }
    for (int i = 2; i <= shared->N_age_p1; ++i) {
      internal.age_I4[i - 1] = dust::random::binomial<real_type>(rng_state, (I4[i - 1 - 1] - internal.O_I4[i - 1 - 1] + internal.inf_4[i - 1 - 1]), internal.agert[i - 1 - 1]);
    }
    {
       int i = 1;
       internal.age_I4[i - 1] = 0;
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      int j = 1;
      internal.disease_sero[i - 1 + shared->dim_disease_sero_1 * (j - 1)] = shared->dis_pri[0] * internal.inf_1[i - 1] + shared->dis_sec[0] * (internal.inf_21[i - 1] + internal.inf_31[i - 1] + internal.inf_41[i - 1]) + shared->dis_tert[0] * (internal.inf_231[i - 1] + internal.inf_241[i - 1] + internal.inf_341[i - 1]) + shared->dis_quart[0] * internal.inf_2341[i - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      int j = 2;
      internal.disease_sero[i - 1 + shared->dim_disease_sero_1 * (j - 1)] = shared->dis_pri[1] * internal.inf_2[i - 1] + shared->dis_sec[1] * (internal.inf_12[i - 1] + internal.inf_32[i - 1] + internal.inf_42[i - 1]) + shared->dis_tert[1] * (internal.inf_132[i - 1] + internal.inf_142[i - 1] + internal.inf_342[i - 1]) + shared->dis_quart[1] * internal.inf_1342[i - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      int j = 3;
      internal.disease_sero[i - 1 + shared->dim_disease_sero_1 * (j - 1)] = shared->dis_pri[2] * internal.inf_3[i - 1] + shared->dis_sec[2] * (internal.inf_13[i - 1] + internal.inf_23[i - 1] + internal.inf_43[i - 1]) + shared->dis_tert[2] * (internal.inf_123[i - 1] + internal.inf_143[i - 1] + internal.inf_243[i - 1]) + shared->dis_quart[2] * internal.inf_1243[i - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      int j = 4;
      internal.disease_sero[i - 1 + shared->dim_disease_sero_1 * (j - 1)] = shared->dis_pri[3] * internal.inf_4[i - 1] + shared->dis_sec[3] * (internal.inf_14[i - 1] + internal.inf_24[i - 1] + internal.inf_34[i - 1]) + shared->dis_tert[3] * (internal.inf_124[i - 1] + internal.inf_134[i - 1] + internal.inf_234[i - 1]) + shared->dis_quart[3] * internal.inf_1234[i - 1];
    }
    for (int i = 1; i <= shared->DATA_NUM_YEARS; ++i) {
      internal.out_cases_yr_switch[i - 1] = ((DATA_YEAR == shared->DATA_START_YEAR + i - 1) && (DATA_PERIOD_ACTIVE == 1) && (cur_data_week <= shared->DATA_NUM_WEEKS) ? 1 : 0);
    }
    for (int i = 1; i <= 53; ++i) {
      internal.out_iso_update_switch[i - 1] = ((CUR_ISO_WEEK == i) && (DATA_PERIOD_ACTIVE == 1) && (cur_data_week <= shared->DATA_NUM_WEEKS) ? 1 : 0);
    }
    for (int i = 1; i <= shared->DATA_NUM_WEEKS; ++i) {
      internal.out_update_switch[i - 1] = ((cur_data_week == i) && (DATA_PERIOD_ACTIVE == 1) && (cur_data_week <= shared->DATA_NUM_WEEKS) ? 1 : 0);
    }
    state_next[2] = (DATA_PERIOD_ACTIVE == 0 ? DATA_DAY : DATA_DAY + shared->DT);
    state_next[31] = exposed2 + Y2T - exposed2 * shared->DT / (real_type) shared->incub;
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I14 + i - 1] = internal.age_I14[i - 1] + I14[i - 1] - internal.O_I14[i - 1] + internal.inf_14[i - 1] - internal.age_I14[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I24 + i - 1] = internal.age_I24[i - 1] + I24[i - 1] - internal.O_I24[i - 1] + internal.inf_24[i - 1] - internal.age_I24[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I3 + i - 1] = internal.age_I3[i - 1] + I3[i - 1] - internal.O_I3[i - 1] + internal.inf_3[i - 1] - internal.age_I3[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I34 + i - 1] = internal.age_I34[i - 1] + I34[i - 1] - internal.O_I34[i - 1] + internal.inf_34[i - 1] - internal.age_I34[i + 1 - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I43 + i - 1] = internal.age_I43[i - 1] + I43[i - 1] - internal.O_I43[i - 1] + internal.inf_43[i - 1] - internal.age_I43[i + 1 - 1];
    }
    state_next[27] = Y2T;
    real_type Y3T = odin_sum1<real_type>(internal.Y3.data(), 0, shared->dim_Y3) / (real_type) NT;
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.Y4[i - 1] = shared->phi_pri[3] * (1 + shared->dis_pri[3] * shared->phi_ed) * internal.inf_4[i - 1] + shared->phi_sec[3] * (1 + shared->dis_sec[3] * shared->phi_ed) * (internal.inf_14[i - 1] + internal.inf_24[i - 1] + internal.inf_34[i - 1]) + shared->phi_tert[3] * (1 + shared->dis_tert[3] * shared->phi_ed) * (internal.inf_124[i - 1] + internal.inf_134[i - 1] + internal.inf_234[i - 1]) + shared->phi_quart[3] * (1 + shared->dis_quart[3] * shared->phi_ed) * internal.inf_1234[i - 1];
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      internal.disease[i - 1] = odin_sum2<real_type>(internal.disease_sero.data(), i - 1, i, 0, shared->dim_disease_sero_2, shared->dim_disease_sero_1);
    }
    state_next[32] = exposed3 + Y3T - exposed3 * shared->DT / (real_type) shared->incub;
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_I4 + i - 1] = internal.age_I4[i - 1] + I4[i - 1] - internal.O_I4[i - 1] + internal.inf_4[i - 1] - internal.age_I4[i + 1 - 1];
    }
    state_next[28] = Y3T;
    real_type Y4T = odin_sum1<real_type>(internal.Y4.data(), 0, shared->dim_Y4) / (real_type) NT;
    real_type disease_tot = odin_sum1<real_type>(internal.disease.data(), 0, shared->dim_disease);
    state_next[33] = exposed4 + Y4T - exposed4 * shared->DT / (real_type) shared->incub;
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_out_disease_age + i - 1] = out_disease_age[i - 1] + (((DATA_PERIOD_ACTIVE == 1) && (cur_data_week <= shared->DATA_NUM_WEEKS) ? internal.disease[i - 1] : 0));
    }
    for (int i = 1; i <= shared->N_age; ++i) {
      state_next[shared->offset_variable_out_disease_cur_week + i - 1] = ((fmodr<real_type>(cur_data_day, 7) == 0 ? 0 : out_disease_cur_week[i - 1])) + internal.disease[i - 1];
    }
    state_next[29] = Y4T;
    for (int i = 1; i <= 53; ++i) {
      state_next[shared->offset_variable_out_disease_isowk + i - 1] = out_disease_isowk[i - 1] + internal.out_iso_update_switch[i - 1] * disease_tot;
    }
    for (int i = 1; i <= shared->DATA_NUM_WEEKS; ++i) {
      state_next[shared->offset_variable_out_disease_tot + i - 1] = out_disease_tot[i - 1] + internal.out_update_switch[i - 1] * disease_tot;
    }
    for (int i = 1; i <= shared->DATA_NUM_YEARS; ++i) {
      state_next[shared->offset_variable_out_disease_tot_yr + i - 1] = out_disease_tot_yr[i - 1] + internal.out_cases_yr_switch[i - 1] * disease_tot;
    }
  }
private:
  std::shared_ptr<const shared_type> shared;
  internal_type internal;
};
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum2(const container x, int from_i, int to_i, int from_j, int to_j, int dim_x_1) {
  real_type tot = 0.0;
  for (int j = from_j; j < to_j; ++j) {
    int jj = j * dim_x_1;
    for (int i = from_i; i < to_i; ++i) {
      tot += x[i + jj];
    }
  }
  return tot;
}
#include <array>
#include <cpp11/R.hpp>
#include <cpp11/sexp.hpp>
#include <cpp11/doubles.hpp>
#include <cpp11/integers.hpp>
#include <cpp11/list.hpp>
#include <cpp11/strings.hpp>
#include <memory>
#include <vector>

template <typename T>
inline bool is_na(T x);

template <>
inline bool is_na(int x) {
  return x == NA_INTEGER;
}

template <>
inline bool is_na(double x) {
  return ISNA(x);
}

inline size_t object_length(cpp11::sexp x) {
  return ::Rf_xlength(x);
}

template <typename T>
void user_check_value(T value, const char *name, T min, T max) {
  if (is_na(value)) {
    cpp11::stop("'%s' must not be NA", name);
  }
  if (!is_na(min) && value < min) {
    cpp11::stop("Expected '%s' to be at least %g", name, (double) min);
  }
  if (!is_na(max) && value > max) {
    cpp11::stop("Expected '%s' to be at most %g", name, (double) max);
  }
}

template <typename T>
void user_check_array_value(const std::vector<T>& value, const char *name,
                            T min, T max) {
  for (auto& x : value) {
    user_check_value(x, name, min, max);
  }
}

inline size_t user_get_array_rank(cpp11::sexp x) {
  if (!::Rf_isArray(x)) {
    return 1;
  } else {
    cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
    return dim.size();
  }
}

template <size_t N>
void user_check_array_rank(cpp11::sexp x, const char *name) {
  size_t rank = user_get_array_rank(x);
  if (rank != N) {
    if (N == 1) {
      cpp11::stop("Expected a vector for '%s'", name);
    } else if (N == 2) {
      cpp11::stop("Expected a matrix for '%s'", name);
    } else {
      cpp11::stop("Expected an array of rank %d for '%s'", N, name);
    }
  }
}

template <size_t N>
void user_check_array_dim(cpp11::sexp x, const char *name,
                          const std::array<int, N>& dim_expected) {
  cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  for (size_t i = 0; i < N; ++i) {
    if (dim[(int)i] != dim_expected[i]) {
      Rf_error("Incorrect size of dimension %d of '%s' (expected %d)",
               i + 1, name, dim_expected[i]);
    }
  }
}

template <>
inline void user_check_array_dim<1>(cpp11::sexp x, const char *name,
                                    const std::array<int, 1>& dim_expected) {
  if ((int)object_length(x) != dim_expected[0]) {
    cpp11::stop("Expected length %d value for '%s'", dim_expected[0], name);
  }
}

template <size_t N>
void user_set_array_dim(cpp11::sexp x, const char *name,
                        std::array<int, N>& dim) {
  cpp11::integers dim_given = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  std::copy(dim_given.begin(), dim_given.end(), dim.begin());
}

template <>
inline void user_set_array_dim<1>(cpp11::sexp x, const char *name,
                                  std::array<int, 1>& dim) {
  dim[0] = object_length(x);
}

template <typename T>
T user_get_scalar(cpp11::list user, const char *name,
                  const T previous, T min, T max) {
  T ret = previous;
  cpp11::sexp x = user[name];
  if (x != R_NilValue) {
    if (object_length(x) != 1) {
      cpp11::stop("Expected a scalar numeric for '%s'", name);
    }
    // TODO: when we're getting out an integer this is a bit too relaxed
    if (TYPEOF(x) == REALSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else if (TYPEOF(x) == INTSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else {
      cpp11::stop("Expected a numeric value for %s", name);
    }
  }

  if (is_na(ret)) {
    cpp11::stop("Expected a value for '%s'", name);
  }
  user_check_value<T>(ret, name, min, max);
  return ret;
}

template <>
inline float user_get_scalar<float>(cpp11::list user, const char *name,
                                    const float previous, float min, float max) {
  double value = user_get_scalar<double>(user, name, previous, min, max);
  return static_cast<float>(value);
}

template <typename T>
std::vector<T> user_get_array_value(cpp11::sexp x, const char * name,
                                    T min, T max) {
  std::vector<T> ret = cpp11::as_cpp<std::vector<T>>(x);
  user_check_array_value<T>(ret, name, min, max);
  return ret;
}

template <typename T, size_t N>
std::vector<T> user_get_array_fixed(cpp11::list user, const char *name,
                                    const std::vector<T> previous,
                                    const std::array<int, N>& dim,
                                    T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_check_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <typename T, size_t N>
std::vector<T> user_get_array_variable(cpp11::list user, const char *name,
                                       std::vector<T> previous,
                                       std::array<int, N>& dim,
                                       T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_set_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <>
inline std::vector<float> user_get_array_value(cpp11::sexp x, const char * name,
                                               float min, float max) {
  // NOTE: possible under/overflow here for min/max because we've
  // downcast this.
  std::vector<double> value = user_get_array_value<double>(x, name, min, max);
  std::vector<float> ret(value.size());
  std::copy(value.begin(), value.end(), ret.begin());
  return ret;
}

// This is sum with inclusive "from", exclusive "to", following the
// same function in odin
template <typename real_type, typename container>
__host__ __device__
real_type odin_sum1(const container x, size_t from, size_t to) {
  real_type tot = 0.0;
  for (size_t i = from; i < to; ++i) {
    tot += x[i];
  }
  return tot;
}

inline cpp11::writable::integers integer_sequence(size_t from, size_t len) {
  cpp11::writable::integers ret(len);
  int* data = INTEGER(ret);
  for (size_t i = 0, j = from; i < len; ++i, ++j) {
    data[i] = j;
  }
  return ret;
}
namespace dust {
template<>
dust::pars_type<model> dust_pars<model>(cpp11::list user) {
  using real_type = typename model::real_type;
  auto shared = std::make_shared<model::shared_type>();
  model::internal_type internal;
  shared->Acrit = 3;
  shared->delta_max = 1;
  shared->delta0 = static_cast<real_type>(0.13);
  shared->dim_births_d_1 = 151;
  shared->dim_births_d_2 = 2;
  shared->dim_dis_pri = 4;
  shared->dim_dis_quart = 4;
  shared->dim_dis_sec = 4;
  shared->dim_dis_tert = 4;
  shared->dim_init_inf_mos = 4;
  shared->dim_out_disease_isowk = 53;
  shared->dim_out_iso_update_switch = 53;
  shared->dim_phi_pri = 4;
  shared->dim_phi_quart = 4;
  shared->dim_phi_scale = 4;
  shared->dim_phi_sec = 4;
  shared->dim_phi_tert = 4;
  shared->dim_sdis_pri = 4;
  shared->dim_sdis_quart = 4;
  shared->dim_sdis_sec = 4;
  shared->dim_sdis_tert = 4;
  shared->DT = 1;
  shared->FOIagescale = 1;
  shared->initial_cur_tot_FOI = 0;
  shared->initial_DATA_DAY = 0;
  shared->initial_exposed1 = 0;
  shared->initial_exposed2 = 0;
  shared->initial_exposed3 = 0;
  shared->initial_exposed4 = 0;
  shared->initial_inc_FOI1 = 0;
  shared->initial_inc_FOI2 = 0;
  shared->initial_inc_FOI3 = 0;
  shared->initial_inc_FOI4 = 0;
  shared->initial_infectious1 = 0;
  shared->initial_infectious2 = 0;
  shared->initial_infectious3 = 0;
  shared->initial_infectious4 = 0;
  shared->initial_Mwt_E1 = 0;
  shared->initial_Mwt_E2 = 0;
  shared->initial_Mwt_E3 = 0;
  shared->initial_Mwt_E4 = 0;
  shared->initial_out_beta = 0;
  shared->initial_out_cur_clim_day = 0;
  shared->initial_out_curisoweek = 0;
  shared->initial_out_delta = 0;
  shared->initial_out_Mwt = 0;
  shared->initial_out_R0agescale = 0;
  shared->initial_out_temp = 0;
  shared->initial_out_year = 0;
  shared->initial_R0t_1 = 0;
  shared->initial_R0t_2 = 0;
  shared->initial_R0t_3 = 0;
  shared->initial_R0t_4 = 0;
  shared->initial_tot_inc_FOI = 0;
  shared->initial_Y1T_out = 0;
  shared->initial_Y2T_out = 0;
  shared->initial_Y3T_out = 0;
  shared->initial_Y4T_out = 0;
  shared->N_age = 25;
  shared->NUM_YEAR_ACCUM = 4;
  shared->PI_C = static_cast<real_type>(3.1415926535900001);
  shared->rho_pri = 1;
  shared->rho_quart = 1;
  shared->rho_sec = 1;
  shared->rho_tert = 1;
  shared->YEAR_STEP = 1;
  shared->YL = 365;
  shared->age_per = shared->YL;
  shared->initial_out_disease_isowk = std::vector<real_type>(shared->dim_out_disease_isowk);
  internal.out_iso_update_switch = std::vector<real_type>(shared->dim_out_iso_update_switch);
  shared->phi_pri = std::vector<real_type>(shared->dim_phi_pri);
  shared->phi_quart = std::vector<real_type>(shared->dim_phi_quart);
  shared->phi_scale = std::vector<real_type>(shared->dim_phi_scale);
  shared->phi_sec = std::vector<real_type>(shared->dim_phi_sec);
  shared->phi_tert = std::vector<real_type>(shared->dim_phi_tert);
  shared->DAYS_IN_4Y = shared->YL * 4 + 1;
  shared->dim_agec = shared->N_age;
  shared->dim_agert = shared->N_age;
  shared->dim_births_d = shared->dim_births_d_1 * shared->dim_births_d_2;
  shared->dim_cur_age_rate = shared->N_age;
  shared->dim_death = shared->N_age;
  shared->dim_deathrt = shared->N_age;
  shared->dim_disease = shared->N_age;
  shared->dim_disease_sero_1 = shared->N_age;
  shared->dim_disease_sero_2 = 4;
  shared->dim_FOI1a = shared->N_age;
  shared->dim_FOI2a = shared->N_age;
  shared->dim_FOI3a = shared->N_age;
  shared->dim_FOI4a = shared->N_age;
  shared->dim_FOIas = shared->N_age;
  shared->dim_I1 = shared->N_age;
  shared->dim_I12 = shared->N_age;
  shared->dim_I123 = shared->N_age;
  shared->dim_I1234 = shared->N_age;
  shared->dim_I124 = shared->N_age;
  shared->dim_I1243 = shared->N_age;
  shared->dim_I13 = shared->N_age;
  shared->dim_I132 = shared->N_age;
  shared->dim_I134 = shared->N_age;
  shared->dim_I1342 = shared->N_age;
  shared->dim_I14 = shared->N_age;
  shared->dim_I142 = shared->N_age;
  shared->dim_I143 = shared->N_age;
  shared->dim_I2 = shared->N_age;
  shared->dim_I21 = shared->N_age;
  shared->dim_I23 = shared->N_age;
  shared->dim_I231 = shared->N_age;
  shared->dim_I234 = shared->N_age;
  shared->dim_I2341 = shared->N_age;
  shared->dim_I24 = shared->N_age;
  shared->dim_I241 = shared->N_age;
  shared->dim_I243 = shared->N_age;
  shared->dim_I3 = shared->N_age;
  shared->dim_I31 = shared->N_age;
  shared->dim_I32 = shared->N_age;
  shared->dim_I34 = shared->N_age;
  shared->dim_I341 = shared->N_age;
  shared->dim_I342 = shared->N_age;
  shared->dim_I4 = shared->N_age;
  shared->dim_I41 = shared->N_age;
  shared->dim_I42 = shared->N_age;
  shared->dim_I43 = shared->N_age;
  shared->dim_inf_1 = shared->N_age;
  shared->dim_inf_12 = shared->N_age;
  shared->dim_inf_123 = shared->N_age;
  shared->dim_inf_1234 = shared->N_age;
  shared->dim_inf_124 = shared->N_age;
  shared->dim_inf_1243 = shared->N_age;
  shared->dim_inf_13 = shared->N_age;
  shared->dim_inf_132 = shared->N_age;
  shared->dim_inf_134 = shared->N_age;
  shared->dim_inf_1342 = shared->N_age;
  shared->dim_inf_14 = shared->N_age;
  shared->dim_inf_142 = shared->N_age;
  shared->dim_inf_143 = shared->N_age;
  shared->dim_inf_2 = shared->N_age;
  shared->dim_inf_21 = shared->N_age;
  shared->dim_inf_23 = shared->N_age;
  shared->dim_inf_231 = shared->N_age;
  shared->dim_inf_234 = shared->N_age;
  shared->dim_inf_2341 = shared->N_age;
  shared->dim_inf_24 = shared->N_age;
  shared->dim_inf_241 = shared->N_age;
  shared->dim_inf_243 = shared->N_age;
  shared->dim_inf_3 = shared->N_age;
  shared->dim_inf_31 = shared->N_age;
  shared->dim_inf_32 = shared->N_age;
  shared->dim_inf_34 = shared->N_age;
  shared->dim_inf_341 = shared->N_age;
  shared->dim_inf_342 = shared->N_age;
  shared->dim_inf_4 = shared->N_age;
  shared->dim_inf_41 = shared->N_age;
  shared->dim_inf_42 = shared->N_age;
  shared->dim_inf_43 = shared->N_age;
  shared->dim_infection_pri = shared->N_age;
  shared->dim_infection_sec = shared->N_age;
  shared->dim_infection_tq = shared->N_age;
  shared->dim_init_life_expec = shared->N_age;
  shared->dim_life_expec = shared->N_age;
  shared->dim_mean_age = shared->N_age;
  shared->dim_N_init_age = shared->N_age;
  shared->dim_N_init_age0 = shared->N_age;
  shared->dim_Ntotal = shared->N_age;
  shared->dim_Ntotal_out = shared->N_age;
  shared->dim_O_I1 = shared->N_age;
  shared->dim_O_I12 = shared->N_age;
  shared->dim_O_I123 = shared->N_age;
  shared->dim_O_I1234 = shared->N_age;
  shared->dim_O_I124 = shared->N_age;
  shared->dim_O_I1243 = shared->N_age;
  shared->dim_O_I13 = shared->N_age;
  shared->dim_O_I132 = shared->N_age;
  shared->dim_O_I134 = shared->N_age;
  shared->dim_O_I1342 = shared->N_age;
  shared->dim_O_I14 = shared->N_age;
  shared->dim_O_I142 = shared->N_age;
  shared->dim_O_I143 = shared->N_age;
  shared->dim_O_I2 = shared->N_age;
  shared->dim_O_I21 = shared->N_age;
  shared->dim_O_I23 = shared->N_age;
  shared->dim_O_I231 = shared->N_age;
  shared->dim_O_I234 = shared->N_age;
  shared->dim_O_I2341 = shared->N_age;
  shared->dim_O_I24 = shared->N_age;
  shared->dim_O_I241 = shared->N_age;
  shared->dim_O_I243 = shared->N_age;
  shared->dim_O_I3 = shared->N_age;
  shared->dim_O_I31 = shared->N_age;
  shared->dim_O_I32 = shared->N_age;
  shared->dim_O_I34 = shared->N_age;
  shared->dim_O_I341 = shared->N_age;
  shared->dim_O_I342 = shared->N_age;
  shared->dim_O_I4 = shared->N_age;
  shared->dim_O_I41 = shared->N_age;
  shared->dim_O_I42 = shared->N_age;
  shared->dim_O_I43 = shared->N_age;
  shared->dim_O_R1 = shared->N_age;
  shared->dim_O_R12 = shared->N_age;
  shared->dim_O_R123 = shared->N_age;
  shared->dim_O_R1234 = shared->N_age;
  shared->dim_O_R124 = shared->N_age;
  shared->dim_O_R13 = shared->N_age;
  shared->dim_O_R134 = shared->N_age;
  shared->dim_O_R14 = shared->N_age;
  shared->dim_O_R2 = shared->N_age;
  shared->dim_O_R23 = shared->N_age;
  shared->dim_O_R234 = shared->N_age;
  shared->dim_O_R24 = shared->N_age;
  shared->dim_O_R3 = shared->N_age;
  shared->dim_O_R34 = shared->N_age;
  shared->dim_O_R4 = shared->N_age;
  shared->dim_O_S = shared->N_age;
  shared->dim_out_disease_age = shared->N_age;
  shared->dim_out_disease_cur_week = shared->N_age;
  shared->dim_out_seronegative = shared->N_age;
  shared->dim_R1 = shared->N_age;
  shared->dim_R12 = shared->N_age;
  shared->dim_R123 = shared->N_age;
  shared->dim_R1234 = shared->N_age;
  shared->dim_R124 = shared->N_age;
  shared->dim_R13 = shared->N_age;
  shared->dim_R134 = shared->N_age;
  shared->dim_R14 = shared->N_age;
  shared->dim_R2 = shared->N_age;
  shared->dim_R23 = shared->N_age;
  shared->dim_R234 = shared->N_age;
  shared->dim_R24 = shared->N_age;
  shared->dim_R3 = shared->N_age;
  shared->dim_R34 = shared->N_age;
  shared->dim_R4 = shared->N_age;
  shared->dim_recov_1 = shared->N_age;
  shared->dim_recov_12 = shared->N_age;
  shared->dim_recov_123 = shared->N_age;
  shared->dim_recov_1234 = shared->N_age;
  shared->dim_recov_124 = shared->N_age;
  shared->dim_recov_1243 = shared->N_age;
  shared->dim_recov_13 = shared->N_age;
  shared->dim_recov_132 = shared->N_age;
  shared->dim_recov_134 = shared->N_age;
  shared->dim_recov_1342 = shared->N_age;
  shared->dim_recov_14 = shared->N_age;
  shared->dim_recov_142 = shared->N_age;
  shared->dim_recov_143 = shared->N_age;
  shared->dim_recov_2 = shared->N_age;
  shared->dim_recov_21 = shared->N_age;
  shared->dim_recov_23 = shared->N_age;
  shared->dim_recov_231 = shared->N_age;
  shared->dim_recov_234 = shared->N_age;
  shared->dim_recov_2341 = shared->N_age;
  shared->dim_recov_24 = shared->N_age;
  shared->dim_recov_241 = shared->N_age;
  shared->dim_recov_243 = shared->N_age;
  shared->dim_recov_3 = shared->N_age;
  shared->dim_recov_31 = shared->N_age;
  shared->dim_recov_32 = shared->N_age;
  shared->dim_recov_34 = shared->N_age;
  shared->dim_recov_341 = shared->N_age;
  shared->dim_recov_342 = shared->N_age;
  shared->dim_recov_4 = shared->N_age;
  shared->dim_recov_41 = shared->N_age;
  shared->dim_recov_42 = shared->N_age;
  shared->dim_recov_43 = shared->N_age;
  shared->dim_S = shared->N_age;
  shared->dim_seroneg = shared->N_age;
  shared->dim_suscinitpop = shared->N_age;
  shared->dim_Y1 = shared->N_age;
  shared->dim_Y2 = shared->N_age;
  shared->dim_Y3 = shared->N_age;
  shared->dim_Y4 = shared->N_age;
  for (int i = 1; i <= 53; ++i) {
    shared->initial_out_disease_isowk[i - 1] = 0;
  }
  shared->N_age_p1 = shared->N_age + 1;
  shared->agec = std::vector<real_type>(shared->dim_agec);
  internal.agert = std::vector<real_type>(shared->dim_agert);
  internal.cur_age_rate = std::vector<real_type>(shared->dim_cur_age_rate);
  internal.death = std::vector<real_type>(shared->dim_death);
  internal.deathrt = std::vector<real_type>(shared->dim_deathrt);
  internal.disease = std::vector<real_type>(shared->dim_disease);
  internal.FOI1a = std::vector<real_type>(shared->dim_FOI1a);
  internal.FOI2a = std::vector<real_type>(shared->dim_FOI2a);
  internal.FOI3a = std::vector<real_type>(shared->dim_FOI3a);
  internal.FOI4a = std::vector<real_type>(shared->dim_FOI4a);
  shared->FOIas = std::vector<real_type>(shared->dim_FOIas);
  internal.inf_1 = std::vector<real_type>(shared->dim_inf_1);
  internal.inf_12 = std::vector<real_type>(shared->dim_inf_12);
  internal.inf_123 = std::vector<real_type>(shared->dim_inf_123);
  internal.inf_1234 = std::vector<real_type>(shared->dim_inf_1234);
  internal.inf_124 = std::vector<real_type>(shared->dim_inf_124);
  internal.inf_1243 = std::vector<real_type>(shared->dim_inf_1243);
  internal.inf_13 = std::vector<real_type>(shared->dim_inf_13);
  internal.inf_132 = std::vector<real_type>(shared->dim_inf_132);
  internal.inf_134 = std::vector<real_type>(shared->dim_inf_134);
  internal.inf_1342 = std::vector<real_type>(shared->dim_inf_1342);
  internal.inf_14 = std::vector<real_type>(shared->dim_inf_14);
  internal.inf_142 = std::vector<real_type>(shared->dim_inf_142);
  internal.inf_143 = std::vector<real_type>(shared->dim_inf_143);
  internal.inf_2 = std::vector<real_type>(shared->dim_inf_2);
  internal.inf_21 = std::vector<real_type>(shared->dim_inf_21);
  internal.inf_23 = std::vector<real_type>(shared->dim_inf_23);
  internal.inf_231 = std::vector<real_type>(shared->dim_inf_231);
  internal.inf_234 = std::vector<real_type>(shared->dim_inf_234);
  internal.inf_2341 = std::vector<real_type>(shared->dim_inf_2341);
  internal.inf_24 = std::vector<real_type>(shared->dim_inf_24);
  internal.inf_241 = std::vector<real_type>(shared->dim_inf_241);
  internal.inf_243 = std::vector<real_type>(shared->dim_inf_243);
  internal.inf_3 = std::vector<real_type>(shared->dim_inf_3);
  internal.inf_31 = std::vector<real_type>(shared->dim_inf_31);
  internal.inf_32 = std::vector<real_type>(shared->dim_inf_32);
  internal.inf_34 = std::vector<real_type>(shared->dim_inf_34);
  internal.inf_341 = std::vector<real_type>(shared->dim_inf_341);
  internal.inf_342 = std::vector<real_type>(shared->dim_inf_342);
  internal.inf_4 = std::vector<real_type>(shared->dim_inf_4);
  internal.inf_41 = std::vector<real_type>(shared->dim_inf_41);
  internal.inf_42 = std::vector<real_type>(shared->dim_inf_42);
  internal.inf_43 = std::vector<real_type>(shared->dim_inf_43);
  internal.infection_pri = std::vector<real_type>(shared->dim_infection_pri);
  internal.infection_sec = std::vector<real_type>(shared->dim_infection_sec);
  internal.infection_tq = std::vector<real_type>(shared->dim_infection_tq);
  shared->init_life_expec = std::vector<real_type>(shared->dim_init_life_expec);
  shared->initial_I1 = std::vector<real_type>(shared->dim_I1);
  shared->initial_I12 = std::vector<real_type>(shared->dim_I12);
  shared->initial_I123 = std::vector<real_type>(shared->dim_I123);
  shared->initial_I1234 = std::vector<real_type>(shared->dim_I1234);
  shared->initial_I124 = std::vector<real_type>(shared->dim_I124);
  shared->initial_I1243 = std::vector<real_type>(shared->dim_I1243);
  shared->initial_I13 = std::vector<real_type>(shared->dim_I13);
  shared->initial_I132 = std::vector<real_type>(shared->dim_I132);
  shared->initial_I134 = std::vector<real_type>(shared->dim_I134);
  shared->initial_I1342 = std::vector<real_type>(shared->dim_I1342);
  shared->initial_I14 = std::vector<real_type>(shared->dim_I14);
  shared->initial_I142 = std::vector<real_type>(shared->dim_I142);
  shared->initial_I143 = std::vector<real_type>(shared->dim_I143);
  shared->initial_I2 = std::vector<real_type>(shared->dim_I2);
  shared->initial_I21 = std::vector<real_type>(shared->dim_I21);
  shared->initial_I23 = std::vector<real_type>(shared->dim_I23);
  shared->initial_I231 = std::vector<real_type>(shared->dim_I231);
  shared->initial_I234 = std::vector<real_type>(shared->dim_I234);
  shared->initial_I2341 = std::vector<real_type>(shared->dim_I2341);
  shared->initial_I24 = std::vector<real_type>(shared->dim_I24);
  shared->initial_I241 = std::vector<real_type>(shared->dim_I241);
  shared->initial_I243 = std::vector<real_type>(shared->dim_I243);
  shared->initial_I3 = std::vector<real_type>(shared->dim_I3);
  shared->initial_I31 = std::vector<real_type>(shared->dim_I31);
  shared->initial_I32 = std::vector<real_type>(shared->dim_I32);
  shared->initial_I34 = std::vector<real_type>(shared->dim_I34);
  shared->initial_I341 = std::vector<real_type>(shared->dim_I341);
  shared->initial_I342 = std::vector<real_type>(shared->dim_I342);
  shared->initial_I4 = std::vector<real_type>(shared->dim_I4);
  shared->initial_I41 = std::vector<real_type>(shared->dim_I41);
  shared->initial_I42 = std::vector<real_type>(shared->dim_I42);
  shared->initial_I43 = std::vector<real_type>(shared->dim_I43);
  shared->initial_Ntotal_out = std::vector<real_type>(shared->dim_Ntotal_out);
  shared->initial_out_disease_age = std::vector<real_type>(shared->dim_out_disease_age);
  shared->initial_out_disease_cur_week = std::vector<real_type>(shared->dim_out_disease_cur_week);
  shared->initial_out_seronegative = std::vector<real_type>(shared->dim_out_seronegative);
  shared->initial_R1 = std::vector<real_type>(shared->dim_R1);
  shared->initial_R12 = std::vector<real_type>(shared->dim_R12);
  shared->initial_R123 = std::vector<real_type>(shared->dim_R123);
  shared->initial_R1234 = std::vector<real_type>(shared->dim_R1234);
  shared->initial_R124 = std::vector<real_type>(shared->dim_R124);
  shared->initial_R13 = std::vector<real_type>(shared->dim_R13);
  shared->initial_R134 = std::vector<real_type>(shared->dim_R134);
  shared->initial_R14 = std::vector<real_type>(shared->dim_R14);
  shared->initial_R2 = std::vector<real_type>(shared->dim_R2);
  shared->initial_R23 = std::vector<real_type>(shared->dim_R23);
  shared->initial_R234 = std::vector<real_type>(shared->dim_R234);
  shared->initial_R24 = std::vector<real_type>(shared->dim_R24);
  shared->initial_R3 = std::vector<real_type>(shared->dim_R3);
  shared->initial_R34 = std::vector<real_type>(shared->dim_R34);
  shared->initial_R4 = std::vector<real_type>(shared->dim_R4);
  shared->initial_S = std::vector<real_type>(shared->dim_S);
  internal.life_expec = std::vector<real_type>(shared->dim_life_expec);
  shared->mean_age = std::vector<real_type>(shared->dim_mean_age);
  shared->N_init_age = std::vector<real_type>(shared->dim_N_init_age);
  shared->N_init_age0 = std::vector<real_type>(shared->dim_N_init_age0);
  internal.Ntotal = std::vector<real_type>(shared->dim_Ntotal);
  internal.O_I1 = std::vector<real_type>(shared->dim_O_I1);
  internal.O_I12 = std::vector<real_type>(shared->dim_O_I12);
  internal.O_I123 = std::vector<real_type>(shared->dim_O_I123);
  internal.O_I1234 = std::vector<real_type>(shared->dim_O_I1234);
  internal.O_I124 = std::vector<real_type>(shared->dim_O_I124);
  internal.O_I1243 = std::vector<real_type>(shared->dim_O_I1243);
  internal.O_I13 = std::vector<real_type>(shared->dim_O_I13);
  internal.O_I132 = std::vector<real_type>(shared->dim_O_I132);
  internal.O_I134 = std::vector<real_type>(shared->dim_O_I134);
  internal.O_I1342 = std::vector<real_type>(shared->dim_O_I1342);
  internal.O_I14 = std::vector<real_type>(shared->dim_O_I14);
  internal.O_I142 = std::vector<real_type>(shared->dim_O_I142);
  internal.O_I143 = std::vector<real_type>(shared->dim_O_I143);
  internal.O_I2 = std::vector<real_type>(shared->dim_O_I2);
  internal.O_I21 = std::vector<real_type>(shared->dim_O_I21);
  internal.O_I23 = std::vector<real_type>(shared->dim_O_I23);
  internal.O_I231 = std::vector<real_type>(shared->dim_O_I231);
  internal.O_I234 = std::vector<real_type>(shared->dim_O_I234);
  internal.O_I2341 = std::vector<real_type>(shared->dim_O_I2341);
  internal.O_I24 = std::vector<real_type>(shared->dim_O_I24);
  internal.O_I241 = std::vector<real_type>(shared->dim_O_I241);
  internal.O_I243 = std::vector<real_type>(shared->dim_O_I243);
  internal.O_I3 = std::vector<real_type>(shared->dim_O_I3);
  internal.O_I31 = std::vector<real_type>(shared->dim_O_I31);
  internal.O_I32 = std::vector<real_type>(shared->dim_O_I32);
  internal.O_I34 = std::vector<real_type>(shared->dim_O_I34);
  internal.O_I341 = std::vector<real_type>(shared->dim_O_I341);
  internal.O_I342 = std::vector<real_type>(shared->dim_O_I342);
  internal.O_I4 = std::vector<real_type>(shared->dim_O_I4);
  internal.O_I41 = std::vector<real_type>(shared->dim_O_I41);
  internal.O_I42 = std::vector<real_type>(shared->dim_O_I42);
  internal.O_I43 = std::vector<real_type>(shared->dim_O_I43);
  internal.O_R1 = std::vector<real_type>(shared->dim_O_R1);
  internal.O_R12 = std::vector<real_type>(shared->dim_O_R12);
  internal.O_R123 = std::vector<real_type>(shared->dim_O_R123);
  internal.O_R1234 = std::vector<real_type>(shared->dim_O_R1234);
  internal.O_R124 = std::vector<real_type>(shared->dim_O_R124);
  internal.O_R13 = std::vector<real_type>(shared->dim_O_R13);
  internal.O_R134 = std::vector<real_type>(shared->dim_O_R134);
  internal.O_R14 = std::vector<real_type>(shared->dim_O_R14);
  internal.O_R2 = std::vector<real_type>(shared->dim_O_R2);
  internal.O_R23 = std::vector<real_type>(shared->dim_O_R23);
  internal.O_R234 = std::vector<real_type>(shared->dim_O_R234);
  internal.O_R24 = std::vector<real_type>(shared->dim_O_R24);
  internal.O_R3 = std::vector<real_type>(shared->dim_O_R3);
  internal.O_R34 = std::vector<real_type>(shared->dim_O_R34);
  internal.O_R4 = std::vector<real_type>(shared->dim_O_R4);
  internal.O_S = std::vector<real_type>(shared->dim_O_S);
  internal.recov_1 = std::vector<real_type>(shared->dim_recov_1);
  internal.recov_12 = std::vector<real_type>(shared->dim_recov_12);
  internal.recov_123 = std::vector<real_type>(shared->dim_recov_123);
  internal.recov_1234 = std::vector<real_type>(shared->dim_recov_1234);
  internal.recov_124 = std::vector<real_type>(shared->dim_recov_124);
  internal.recov_1243 = std::vector<real_type>(shared->dim_recov_1243);
  internal.recov_13 = std::vector<real_type>(shared->dim_recov_13);
  internal.recov_132 = std::vector<real_type>(shared->dim_recov_132);
  internal.recov_134 = std::vector<real_type>(shared->dim_recov_134);
  internal.recov_1342 = std::vector<real_type>(shared->dim_recov_1342);
  internal.recov_14 = std::vector<real_type>(shared->dim_recov_14);
  internal.recov_142 = std::vector<real_type>(shared->dim_recov_142);
  internal.recov_143 = std::vector<real_type>(shared->dim_recov_143);
  internal.recov_2 = std::vector<real_type>(shared->dim_recov_2);
  internal.recov_21 = std::vector<real_type>(shared->dim_recov_21);
  internal.recov_23 = std::vector<real_type>(shared->dim_recov_23);
  internal.recov_231 = std::vector<real_type>(shared->dim_recov_231);
  internal.recov_234 = std::vector<real_type>(shared->dim_recov_234);
  internal.recov_2341 = std::vector<real_type>(shared->dim_recov_2341);
  internal.recov_24 = std::vector<real_type>(shared->dim_recov_24);
  internal.recov_241 = std::vector<real_type>(shared->dim_recov_241);
  internal.recov_243 = std::vector<real_type>(shared->dim_recov_243);
  internal.recov_3 = std::vector<real_type>(shared->dim_recov_3);
  internal.recov_31 = std::vector<real_type>(shared->dim_recov_31);
  internal.recov_32 = std::vector<real_type>(shared->dim_recov_32);
  internal.recov_34 = std::vector<real_type>(shared->dim_recov_34);
  internal.recov_341 = std::vector<real_type>(shared->dim_recov_341);
  internal.recov_342 = std::vector<real_type>(shared->dim_recov_342);
  internal.recov_4 = std::vector<real_type>(shared->dim_recov_4);
  internal.recov_41 = std::vector<real_type>(shared->dim_recov_41);
  internal.recov_42 = std::vector<real_type>(shared->dim_recov_42);
  internal.recov_43 = std::vector<real_type>(shared->dim_recov_43);
  internal.seroneg = std::vector<real_type>(shared->dim_seroneg);
  shared->suscinitpop = std::vector<real_type>(shared->dim_suscinitpop);
  internal.Y1 = std::vector<real_type>(shared->dim_Y1);
  internal.Y2 = std::vector<real_type>(shared->dim_Y2);
  internal.Y3 = std::vector<real_type>(shared->dim_Y3);
  internal.Y4 = std::vector<real_type>(shared->dim_Y4);
  shared->dim_age_I1 = shared->N_age_p1;
  shared->dim_age_I12 = shared->N_age_p1;
  shared->dim_age_I123 = shared->N_age_p1;
  shared->dim_age_I1234 = shared->N_age_p1;
  shared->dim_age_I124 = shared->N_age_p1;
  shared->dim_age_I1243 = shared->N_age_p1;
  shared->dim_age_I13 = shared->N_age_p1;
  shared->dim_age_I132 = shared->N_age_p1;
  shared->dim_age_I134 = shared->N_age_p1;
  shared->dim_age_I1342 = shared->N_age_p1;
  shared->dim_age_I14 = shared->N_age_p1;
  shared->dim_age_I142 = shared->N_age_p1;
  shared->dim_age_I143 = shared->N_age_p1;
  shared->dim_age_I2 = shared->N_age_p1;
  shared->dim_age_I21 = shared->N_age_p1;
  shared->dim_age_I23 = shared->N_age_p1;
  shared->dim_age_I231 = shared->N_age_p1;
  shared->dim_age_I234 = shared->N_age_p1;
  shared->dim_age_I2341 = shared->N_age_p1;
  shared->dim_age_I24 = shared->N_age_p1;
  shared->dim_age_I241 = shared->N_age_p1;
  shared->dim_age_I243 = shared->N_age_p1;
  shared->dim_age_I3 = shared->N_age_p1;
  shared->dim_age_I31 = shared->N_age_p1;
  shared->dim_age_I32 = shared->N_age_p1;
  shared->dim_age_I34 = shared->N_age_p1;
  shared->dim_age_I341 = shared->N_age_p1;
  shared->dim_age_I342 = shared->N_age_p1;
  shared->dim_age_I4 = shared->N_age_p1;
  shared->dim_age_I41 = shared->N_age_p1;
  shared->dim_age_I42 = shared->N_age_p1;
  shared->dim_age_I43 = shared->N_age_p1;
  shared->dim_age_R1 = shared->N_age_p1;
  shared->dim_age_R12 = shared->N_age_p1;
  shared->dim_age_R123 = shared->N_age_p1;
  shared->dim_age_R1234 = shared->N_age_p1;
  shared->dim_age_R124 = shared->N_age_p1;
  shared->dim_age_R13 = shared->N_age_p1;
  shared->dim_age_R134 = shared->N_age_p1;
  shared->dim_age_R14 = shared->N_age_p1;
  shared->dim_age_R2 = shared->N_age_p1;
  shared->dim_age_R23 = shared->N_age_p1;
  shared->dim_age_R234 = shared->N_age_p1;
  shared->dim_age_R24 = shared->N_age_p1;
  shared->dim_age_R3 = shared->N_age_p1;
  shared->dim_age_R34 = shared->N_age_p1;
  shared->dim_age_R4 = shared->N_age_p1;
  shared->dim_age_rate_d_1 = 151;
  shared->dim_age_rate_d_2 = shared->N_age_p1;
  shared->dim_age_removal_d_1 = 151;
  shared->dim_age_removal_d_2 = shared->N_age_p1;
  shared->dim_age_S = shared->N_age_p1;
  shared->dim_ageb = shared->N_age_p1;
  shared->dim_disease_sero = shared->dim_disease_sero_1 * shared->dim_disease_sero_2;
  shared->dim_life_expec_d_1 = 151;
  shared->dim_life_expec_d_2 = shared->N_age_p1;
  shared->dim_pop_size_d = shared->N_age_p1;
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I1[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I12[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I123[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I1234[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I124[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I1243[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I13[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I132[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I134[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I1342[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I14[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I142[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I143[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I2[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I21[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I23[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I231[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I234[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I2341[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I24[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I241[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I243[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I3[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I31[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I32[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I34[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I341[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I342[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I4[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I41[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I42[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_I43[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_out_disease_age[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_out_disease_cur_week[i - 1] = 0;
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_out_seronegative[i - 1] = 0;
  }
  shared->offset_variable_I1 = shared->dim_S + 44;
  shared->offset_variable_I12 = shared->dim_I1 + shared->dim_I2 + shared->dim_I21 + shared->dim_I3 + shared->dim_I31 + shared->dim_I4 + shared->dim_I41 + shared->dim_R1 + shared->dim_R2 + shared->dim_R3 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I123 = shared->dim_I1 + shared->dim_I12 + shared->dim_I13 + shared->dim_I132 + shared->dim_I14 + shared->dim_I142 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I24 + shared->dim_I241 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R13 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I1234 = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I124 + shared->dim_I1243 + shared->dim_I13 + shared->dim_I132 + shared->dim_I134 + shared->dim_I1342 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I234 + shared->dim_I2341 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R123 + shared->dim_R124 + shared->dim_R13 + shared->dim_R134 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R234 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I124 = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I13 + shared->dim_I132 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R13 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I1243 = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I124 + shared->dim_I13 + shared->dim_I132 + shared->dim_I134 + shared->dim_I1342 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I234 + shared->dim_I2341 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R123 + shared->dim_R124 + shared->dim_R13 + shared->dim_R134 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R234 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I13 = shared->dim_I1 + shared->dim_I12 + shared->dim_I2 + shared->dim_I21 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_R1 + shared->dim_R2 + shared->dim_R3 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I132 = shared->dim_I1 + shared->dim_I12 + shared->dim_I13 + shared->dim_I14 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I24 + shared->dim_I241 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R13 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I134 = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I124 + shared->dim_I13 + shared->dim_I132 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R13 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I1342 = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I124 + shared->dim_I13 + shared->dim_I132 + shared->dim_I134 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I234 + shared->dim_I2341 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R123 + shared->dim_R124 + shared->dim_R13 + shared->dim_R134 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R234 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I14 = shared->dim_I1 + shared->dim_I12 + shared->dim_I13 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R2 + shared->dim_R3 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I142 = shared->dim_I1 + shared->dim_I12 + shared->dim_I13 + shared->dim_I132 + shared->dim_I14 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I24 + shared->dim_I241 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R13 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I143 = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I13 + shared->dim_I132 + shared->dim_I14 + shared->dim_I142 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I24 + shared->dim_I241 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R13 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I2 = shared->dim_I1 + shared->dim_S + 44;
  shared->offset_variable_I21 = shared->dim_I1 + shared->dim_I2 + shared->dim_I3 + shared->dim_I4 + shared->dim_R1 + shared->dim_R2 + shared->dim_R3 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I23 = shared->dim_I1 + shared->dim_I12 + shared->dim_I13 + shared->dim_I2 + shared->dim_I21 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_R1 + shared->dim_R2 + shared->dim_R3 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I231 = shared->dim_I1 + shared->dim_I12 + shared->dim_I13 + shared->dim_I14 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I24 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R13 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I234 = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I124 + shared->dim_I13 + shared->dim_I132 + shared->dim_I134 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R13 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I2341 = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I124 + shared->dim_I13 + shared->dim_I132 + shared->dim_I134 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I234 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R123 + shared->dim_R124 + shared->dim_R13 + shared->dim_R134 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R234 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I24 = shared->dim_I1 + shared->dim_I12 + shared->dim_I13 + shared->dim_I14 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R2 + shared->dim_R3 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I241 = shared->dim_I1 + shared->dim_I12 + shared->dim_I13 + shared->dim_I14 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I24 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R13 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I243 = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I13 + shared->dim_I132 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I24 + shared->dim_I241 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R13 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I3 = shared->dim_I1 + shared->dim_I2 + shared->dim_S + 44;
  shared->offset_variable_I31 = shared->dim_I1 + shared->dim_I2 + shared->dim_I21 + shared->dim_I3 + shared->dim_I4 + shared->dim_R1 + shared->dim_R2 + shared->dim_R3 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I32 = shared->dim_I1 + shared->dim_I12 + shared->dim_I2 + shared->dim_I21 + shared->dim_I3 + shared->dim_I31 + shared->dim_I4 + shared->dim_I41 + shared->dim_R1 + shared->dim_R2 + shared->dim_R3 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I34 = shared->dim_I1 + shared->dim_I12 + shared->dim_I13 + shared->dim_I14 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I24 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R2 + shared->dim_R3 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I341 = shared->dim_I1 + shared->dim_I12 + shared->dim_I13 + shared->dim_I14 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I24 + shared->dim_I241 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R13 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I342 = shared->dim_I1 + shared->dim_I12 + shared->dim_I13 + shared->dim_I132 + shared->dim_I14 + shared->dim_I142 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I24 + shared->dim_I241 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R13 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I4 = shared->dim_I1 + shared->dim_I2 + shared->dim_I3 + shared->dim_S + 44;
  shared->offset_variable_I41 = shared->dim_I1 + shared->dim_I2 + shared->dim_I21 + shared->dim_I3 + shared->dim_I31 + shared->dim_I4 + shared->dim_R1 + shared->dim_R2 + shared->dim_R3 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I42 = shared->dim_I1 + shared->dim_I12 + shared->dim_I2 + shared->dim_I21 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I4 + shared->dim_I41 + shared->dim_R1 + shared->dim_R2 + shared->dim_R3 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_I43 = shared->dim_I1 + shared->dim_I12 + shared->dim_I13 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_R1 + shared->dim_R2 + shared->dim_R3 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_Ntotal_out = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I1234 + shared->dim_I124 + shared->dim_I1243 + shared->dim_I13 + shared->dim_I132 + shared->dim_I134 + shared->dim_I1342 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I234 + shared->dim_I2341 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R123 + shared->dim_R1234 + shared->dim_R124 + shared->dim_R13 + shared->dim_R134 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R234 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_out_disease_cur_week = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I1234 + shared->dim_I124 + shared->dim_I1243 + shared->dim_I13 + shared->dim_I132 + shared->dim_I134 + shared->dim_I1342 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I234 + shared->dim_I2341 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_Ntotal_out + shared->dim_R1 + shared->dim_R12 + shared->dim_R123 + shared->dim_R1234 + shared->dim_R124 + shared->dim_R13 + shared->dim_R134 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R234 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_out_disease_tot = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I1234 + shared->dim_I124 + shared->dim_I1243 + shared->dim_I13 + shared->dim_I132 + shared->dim_I134 + shared->dim_I1342 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I234 + shared->dim_I2341 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_Ntotal_out + shared->dim_out_disease_cur_week + shared->dim_R1 + shared->dim_R12 + shared->dim_R123 + shared->dim_R1234 + shared->dim_R124 + shared->dim_R13 + shared->dim_R134 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R234 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_R1 = shared->dim_I1 + shared->dim_I2 + shared->dim_I3 + shared->dim_I4 + shared->dim_S + 44;
  shared->offset_variable_R12 = shared->dim_I1 + shared->dim_I12 + shared->dim_I13 + shared->dim_I14 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I24 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R2 + shared->dim_R3 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_R123 = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I124 + shared->dim_I13 + shared->dim_I132 + shared->dim_I134 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I234 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R13 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_R1234 = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I1234 + shared->dim_I124 + shared->dim_I1243 + shared->dim_I13 + shared->dim_I132 + shared->dim_I134 + shared->dim_I1342 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I234 + shared->dim_I2341 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R123 + shared->dim_R124 + shared->dim_R13 + shared->dim_R134 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R234 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_R124 = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I124 + shared->dim_I13 + shared->dim_I132 + shared->dim_I134 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I234 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R123 + shared->dim_R13 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_R13 = shared->dim_I1 + shared->dim_I12 + shared->dim_I13 + shared->dim_I14 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I24 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R2 + shared->dim_R3 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_R134 = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I124 + shared->dim_I13 + shared->dim_I132 + shared->dim_I134 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I234 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R123 + shared->dim_R124 + shared->dim_R13 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_R14 = shared->dim_I1 + shared->dim_I12 + shared->dim_I13 + shared->dim_I14 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I24 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R13 + shared->dim_R2 + shared->dim_R3 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_R2 = shared->dim_I1 + shared->dim_I2 + shared->dim_I3 + shared->dim_I4 + shared->dim_R1 + shared->dim_S + 44;
  shared->offset_variable_R23 = shared->dim_I1 + shared->dim_I12 + shared->dim_I13 + shared->dim_I14 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I24 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R13 + shared->dim_R14 + shared->dim_R2 + shared->dim_R3 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_R234 = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I124 + shared->dim_I13 + shared->dim_I132 + shared->dim_I134 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I234 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R123 + shared->dim_R124 + shared->dim_R13 + shared->dim_R134 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_R24 = shared->dim_I1 + shared->dim_I12 + shared->dim_I13 + shared->dim_I14 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I24 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R13 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R3 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_R3 = shared->dim_I1 + shared->dim_I2 + shared->dim_I3 + shared->dim_I4 + shared->dim_R1 + shared->dim_R2 + shared->dim_S + 44;
  shared->offset_variable_R34 = shared->dim_I1 + shared->dim_I12 + shared->dim_I13 + shared->dim_I14 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I24 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_R1 + shared->dim_R12 + shared->dim_R13 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R24 + shared->dim_R3 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_R4 = shared->dim_I1 + shared->dim_I2 + shared->dim_I3 + shared->dim_I4 + shared->dim_R1 + shared->dim_R2 + shared->dim_R3 + shared->dim_S + 44;
  for (int i = 1; i <= 15; ++i) {
    shared->agec[i - 1] = 1;
  }
  for (int i = 16; i <= 18; ++i) {
    shared->agec[i - 1] = 5;
  }
  for (int i = 19; i <= 25; ++i) {
    shared->agec[i - 1] = 10;
  }
  internal.age_I1 = std::vector<real_type>(shared->dim_age_I1);
  internal.age_I12 = std::vector<real_type>(shared->dim_age_I12);
  internal.age_I123 = std::vector<real_type>(shared->dim_age_I123);
  internal.age_I1234 = std::vector<real_type>(shared->dim_age_I1234);
  internal.age_I124 = std::vector<real_type>(shared->dim_age_I124);
  internal.age_I1243 = std::vector<real_type>(shared->dim_age_I1243);
  internal.age_I13 = std::vector<real_type>(shared->dim_age_I13);
  internal.age_I132 = std::vector<real_type>(shared->dim_age_I132);
  internal.age_I134 = std::vector<real_type>(shared->dim_age_I134);
  internal.age_I1342 = std::vector<real_type>(shared->dim_age_I1342);
  internal.age_I14 = std::vector<real_type>(shared->dim_age_I14);
  internal.age_I142 = std::vector<real_type>(shared->dim_age_I142);
  internal.age_I143 = std::vector<real_type>(shared->dim_age_I143);
  internal.age_I2 = std::vector<real_type>(shared->dim_age_I2);
  internal.age_I21 = std::vector<real_type>(shared->dim_age_I21);
  internal.age_I23 = std::vector<real_type>(shared->dim_age_I23);
  internal.age_I231 = std::vector<real_type>(shared->dim_age_I231);
  internal.age_I234 = std::vector<real_type>(shared->dim_age_I234);
  internal.age_I2341 = std::vector<real_type>(shared->dim_age_I2341);
  internal.age_I24 = std::vector<real_type>(shared->dim_age_I24);
  internal.age_I241 = std::vector<real_type>(shared->dim_age_I241);
  internal.age_I243 = std::vector<real_type>(shared->dim_age_I243);
  internal.age_I3 = std::vector<real_type>(shared->dim_age_I3);
  internal.age_I31 = std::vector<real_type>(shared->dim_age_I31);
  internal.age_I32 = std::vector<real_type>(shared->dim_age_I32);
  internal.age_I34 = std::vector<real_type>(shared->dim_age_I34);
  internal.age_I341 = std::vector<real_type>(shared->dim_age_I341);
  internal.age_I342 = std::vector<real_type>(shared->dim_age_I342);
  internal.age_I4 = std::vector<real_type>(shared->dim_age_I4);
  internal.age_I41 = std::vector<real_type>(shared->dim_age_I41);
  internal.age_I42 = std::vector<real_type>(shared->dim_age_I42);
  internal.age_I43 = std::vector<real_type>(shared->dim_age_I43);
  internal.age_R1 = std::vector<real_type>(shared->dim_age_R1);
  internal.age_R12 = std::vector<real_type>(shared->dim_age_R12);
  internal.age_R123 = std::vector<real_type>(shared->dim_age_R123);
  internal.age_R1234 = std::vector<real_type>(shared->dim_age_R1234);
  internal.age_R124 = std::vector<real_type>(shared->dim_age_R124);
  internal.age_R13 = std::vector<real_type>(shared->dim_age_R13);
  internal.age_R134 = std::vector<real_type>(shared->dim_age_R134);
  internal.age_R14 = std::vector<real_type>(shared->dim_age_R14);
  internal.age_R2 = std::vector<real_type>(shared->dim_age_R2);
  internal.age_R23 = std::vector<real_type>(shared->dim_age_R23);
  internal.age_R234 = std::vector<real_type>(shared->dim_age_R234);
  internal.age_R24 = std::vector<real_type>(shared->dim_age_R24);
  internal.age_R3 = std::vector<real_type>(shared->dim_age_R3);
  internal.age_R34 = std::vector<real_type>(shared->dim_age_R34);
  internal.age_R4 = std::vector<real_type>(shared->dim_age_R4);
  internal.age_S = std::vector<real_type>(shared->dim_age_S);
  shared->ageb = std::vector<real_type>(shared->dim_ageb);
  internal.disease_sero = std::vector<real_type>(shared->dim_disease_sero);
  shared->dim_age_rate_d = shared->dim_age_rate_d_1 * shared->dim_age_rate_d_2;
  shared->dim_age_removal_d = shared->dim_age_removal_d_1 * shared->dim_age_removal_d_2;
  shared->dim_life_expec_d = shared->dim_life_expec_d_1 * shared->dim_life_expec_d_2;
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->FOIas[i - 1] = (i > shared->Acrit ? shared->FOIagescale : 1);
  }
  {
     int i = 1;
     shared->ageb[i - 1] = 0;
  }
  for (int i = 2; i <= (shared->N_age_p1); ++i) {
    shared->ageb[i - 1] = shared->ageb[i - 1 - 1] + shared->agec[i - 1 - 1];
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->mean_age[i - 1] = (static_cast<real_type>(0.75) * shared->ageb[i - 1] + static_cast<real_type>(0.25) * shared->ageb[i + 1 - 1]);
  }
  shared->Beta_fT0 = NA_REAL;
  shared->Beta_hm_max = NA_REAL;
  shared->Beta_mh_max = NA_REAL;
  shared->Beta_pT0d = NA_REAL;
  shared->Beta_pTm = NA_REAL;
  shared->Beta_Tm = NA_REAL;
  shared->CALIB_YEAR = NA_REAL;
  shared->COVID_START = NA_REAL;
  shared->COVID_STOP = NA_REAL;
  shared->COVID_trans_level = NA_REAL;
  shared->DATA_NUM_WEEKS = NA_INTEGER;
  shared->DATA_REPORTING_DELAY = NA_REAL;
  shared->DATA_SERO_YEAR = NA_REAL;
  shared->DATA_START_YEAR = NA_REAL;
  shared->delta_fT0 = NA_REAL;
  shared->delta_p = NA_REAL;
  shared->delta_pT0d = NA_REAL;
  shared->delta_pTm = NA_REAL;
  shared->delta_Tm = NA_REAL;
  shared->dur_cross_prot = NA_REAL;
  shared->eip = NA_REAL;
  shared->epsilon = NA_REAL;
  shared->EQUILIB_YEARS = NA_REAL;
  shared->extInf = NA_REAL;
  shared->FIRST_CLIM_YEAR = NA_REAL;
  shared->FIRST_YEAR = NA_REAL;
  shared->incub = NA_REAL;
  shared->inf_per = NA_REAL;
  shared->kappa = NA_REAL;
  shared->LAST_CLIM_YEAR = NA_REAL;
  shared->LAST_YEAR = NA_REAL;
  shared->max_rain = NA_REAL;
  shared->Mwt = NA_REAL;
  shared->N_sim = NA_REAL;
  shared->NTP = NA_INTEGER;
  shared->omega = NA_REAL;
  shared->phi_dis_enhance = NA_REAL;
  shared->Rel_R01 = NA_REAL;
  shared->Rel_R02 = NA_REAL;
  shared->Rel_R03 = NA_REAL;
  shared->Rel_R04 = NA_REAL;
  shared->REPEAT_CLIM_4YEARS = NA_REAL;
  shared->Rm = NA_REAL;
  shared->sat_rain = NA_REAL;
  shared->sigma = NA_REAL;
  shared->tau_rain = NA_REAL;
  shared->Beta_fT0 = user_get_scalar<real_type>(user, "Beta_fT0", shared->Beta_fT0, NA_REAL, NA_REAL);
  shared->Beta_hm_max = user_get_scalar<real_type>(user, "Beta_hm_max", shared->Beta_hm_max, NA_REAL, NA_REAL);
  shared->Beta_mh_max = user_get_scalar<real_type>(user, "Beta_mh_max", shared->Beta_mh_max, NA_REAL, NA_REAL);
  shared->Beta_pT0d = user_get_scalar<real_type>(user, "Beta_pT0d", shared->Beta_pT0d, NA_REAL, NA_REAL);
  shared->Beta_pTm = user_get_scalar<real_type>(user, "Beta_pTm", shared->Beta_pTm, NA_REAL, NA_REAL);
  shared->Beta_Tm = user_get_scalar<real_type>(user, "Beta_Tm", shared->Beta_Tm, NA_REAL, NA_REAL);
  shared->CALIB_YEAR = user_get_scalar<real_type>(user, "CALIB_YEAR", shared->CALIB_YEAR, NA_REAL, NA_REAL);
  shared->COVID_START = user_get_scalar<real_type>(user, "COVID_START", shared->COVID_START, NA_REAL, NA_REAL);
  shared->COVID_STOP = user_get_scalar<real_type>(user, "COVID_STOP", shared->COVID_STOP, NA_REAL, NA_REAL);
  shared->COVID_trans_level = user_get_scalar<real_type>(user, "COVID_trans_level", shared->COVID_trans_level, NA_REAL, NA_REAL);
  shared->DATA_NUM_WEEKS = user_get_scalar<int>(user, "DATA_NUM_WEEKS", shared->DATA_NUM_WEEKS, NA_INTEGER, NA_INTEGER);
  shared->DATA_REPORTING_DELAY = user_get_scalar<real_type>(user, "DATA_REPORTING_DELAY", shared->DATA_REPORTING_DELAY, NA_REAL, NA_REAL);
  shared->DATA_SERO_YEAR = user_get_scalar<real_type>(user, "DATA_SERO_YEAR", shared->DATA_SERO_YEAR, NA_REAL, NA_REAL);
  shared->DATA_START_YEAR = user_get_scalar<real_type>(user, "DATA_START_YEAR", shared->DATA_START_YEAR, NA_REAL, NA_REAL);
  shared->delta_fT0 = user_get_scalar<real_type>(user, "delta_fT0", shared->delta_fT0, NA_REAL, NA_REAL);
  shared->delta_p = user_get_scalar<real_type>(user, "delta_p", shared->delta_p, NA_REAL, NA_REAL);
  shared->delta_pT0d = user_get_scalar<real_type>(user, "delta_pT0d", shared->delta_pT0d, NA_REAL, NA_REAL);
  shared->delta_pTm = user_get_scalar<real_type>(user, "delta_pTm", shared->delta_pTm, NA_REAL, NA_REAL);
  shared->delta_Tm = user_get_scalar<real_type>(user, "delta_Tm", shared->delta_Tm, NA_REAL, NA_REAL);
  shared->dur_cross_prot = user_get_scalar<real_type>(user, "dur_cross_prot", shared->dur_cross_prot, NA_REAL, NA_REAL);
  shared->eip = user_get_scalar<real_type>(user, "eip", shared->eip, NA_REAL, NA_REAL);
  shared->epsilon = user_get_scalar<real_type>(user, "epsilon", shared->epsilon, NA_REAL, NA_REAL);
  shared->EQUILIB_YEARS = user_get_scalar<real_type>(user, "EQUILIB_YEARS", shared->EQUILIB_YEARS, NA_REAL, NA_REAL);
  shared->extInf = user_get_scalar<real_type>(user, "extInf", shared->extInf, NA_REAL, NA_REAL);
  shared->FIRST_CLIM_YEAR = user_get_scalar<real_type>(user, "FIRST_CLIM_YEAR", shared->FIRST_CLIM_YEAR, NA_REAL, NA_REAL);
  shared->FIRST_YEAR = user_get_scalar<real_type>(user, "FIRST_YEAR", shared->FIRST_YEAR, NA_REAL, NA_REAL);
  shared->incub = user_get_scalar<real_type>(user, "incub", shared->incub, NA_REAL, NA_REAL);
  shared->inf_per = user_get_scalar<real_type>(user, "inf_per", shared->inf_per, NA_REAL, NA_REAL);
  shared->kappa = user_get_scalar<real_type>(user, "kappa", shared->kappa, NA_REAL, NA_REAL);
  shared->LAST_CLIM_YEAR = user_get_scalar<real_type>(user, "LAST_CLIM_YEAR", shared->LAST_CLIM_YEAR, NA_REAL, NA_REAL);
  shared->LAST_YEAR = user_get_scalar<real_type>(user, "LAST_YEAR", shared->LAST_YEAR, NA_REAL, NA_REAL);
  shared->max_rain = user_get_scalar<real_type>(user, "max_rain", shared->max_rain, NA_REAL, NA_REAL);
  shared->Mwt = user_get_scalar<real_type>(user, "Mwt", shared->Mwt, NA_REAL, NA_REAL);
  shared->N_sim = user_get_scalar<real_type>(user, "N_sim", shared->N_sim, NA_REAL, NA_REAL);
  shared->NTP = user_get_scalar<int>(user, "NTP", shared->NTP, NA_INTEGER, NA_INTEGER);
  shared->omega = user_get_scalar<real_type>(user, "omega", shared->omega, NA_REAL, NA_REAL);
  shared->phi_dis_enhance = user_get_scalar<real_type>(user, "phi_dis_enhance", shared->phi_dis_enhance, NA_REAL, NA_REAL);
  shared->Rel_R01 = user_get_scalar<real_type>(user, "Rel_R01", shared->Rel_R01, NA_REAL, NA_REAL);
  shared->Rel_R02 = user_get_scalar<real_type>(user, "Rel_R02", shared->Rel_R02, NA_REAL, NA_REAL);
  shared->Rel_R03 = user_get_scalar<real_type>(user, "Rel_R03", shared->Rel_R03, NA_REAL, NA_REAL);
  shared->Rel_R04 = user_get_scalar<real_type>(user, "Rel_R04", shared->Rel_R04, NA_REAL, NA_REAL);
  shared->REPEAT_CLIM_4YEARS = user_get_scalar<real_type>(user, "REPEAT_CLIM_4YEARS", shared->REPEAT_CLIM_4YEARS, NA_REAL, NA_REAL);
  shared->Rm = user_get_scalar<real_type>(user, "Rm", shared->Rm, NA_REAL, NA_REAL);
  shared->sat_rain = user_get_scalar<real_type>(user, "sat_rain", shared->sat_rain, NA_REAL, NA_REAL);
  shared->sigma = user_get_scalar<real_type>(user, "sigma", shared->sigma, NA_REAL, NA_REAL);
  shared->tau_rain = user_get_scalar<real_type>(user, "tau_rain", shared->tau_rain, NA_REAL, NA_REAL);
  shared->accum_rain_eq = 1 / (real_type) (1 + 1 / (real_type) shared->sat_rain + 1 / (real_type) (shared->max_rain * shared->max_rain));
  shared->Beta_hm_mean = static_cast<real_type>(0.85999999999999999) * shared->Beta_hm_max;
  shared->Beta_mh_mean = static_cast<real_type>(0.85999999999999999) * shared->Beta_mh_max;
  shared->Beta_pT0 = shared->Beta_pTm + shared->Beta_pT0d;
  shared->Beta_T0 = shared->Beta_Tm * shared->Beta_fT0;
  shared->DATA_NUM_YEARS = dust::math::floor(shared->DATA_NUM_WEEKS / (real_type) 52);
  shared->delta_pT0 = shared->delta_pTm + shared->delta_pT0d;
  shared->delta_T0 = shared->delta_Tm * shared->delta_fT0;
  shared->dim_climate_d_1 = shared->NTP;
  shared->dim_climate_d_2 = 2;
  shared->dim_out_disease_tot = shared->DATA_NUM_WEEKS;
  shared->dim_out_update_switch = shared->DATA_NUM_WEEKS;
  shared->dis_pri = user_get_array_fixed<real_type, 1>(user, "dis_pri", shared->dis_pri, {shared->dim_dis_pri}, NA_REAL, NA_REAL);
  shared->dis_quart = user_get_array_fixed<real_type, 1>(user, "dis_quart", shared->dis_quart, {shared->dim_dis_quart}, NA_REAL, NA_REAL);
  shared->dis_sec = user_get_array_fixed<real_type, 1>(user, "dis_sec", shared->dis_sec, {shared->dim_dis_sec}, NA_REAL, NA_REAL);
  shared->dis_tert = user_get_array_fixed<real_type, 1>(user, "dis_tert", shared->dis_tert, {shared->dim_dis_tert}, NA_REAL, NA_REAL);
  shared->extInfRand = shared->extInf;
  shared->gamma = shared->Rm * shared->delta0 * (shared->epsilon + shared->sigma) / (real_type) shared->epsilon;
  shared->init_inf_mos = user_get_array_fixed<real_type, 1>(user, "init_inf_mos", shared->init_inf_mos, {shared->dim_init_inf_mos}, NA_REAL, NA_REAL);
  shared->max_rel_year = shared->LAST_YEAR - shared->FIRST_YEAR;
  shared->nu = shared->DT / (real_type) shared->dur_cross_prot;
  shared->phi_ed = shared->phi_dis_enhance - 1;
  shared->sdis_pri = user_get_array_fixed<real_type, 1>(user, "sdis_pri", shared->sdis_pri, {shared->dim_sdis_pri}, NA_REAL, NA_REAL);
  shared->sdis_quart = user_get_array_fixed<real_type, 1>(user, "sdis_quart", shared->sdis_quart, {shared->dim_sdis_quart}, NA_REAL, NA_REAL);
  shared->sdis_sec = user_get_array_fixed<real_type, 1>(user, "sdis_sec", shared->sdis_sec, {shared->dim_sdis_sec}, NA_REAL, NA_REAL);
  shared->sdis_tert = user_get_array_fixed<real_type, 1>(user, "sdis_tert", shared->sdis_tert, {shared->dim_sdis_tert}, NA_REAL, NA_REAL);
  shared->START_YEAR = shared->FIRST_YEAR - shared->EQUILIB_YEARS;
  shared->year_calib = 1 + shared->CALIB_YEAR - shared->FIRST_YEAR;
  shared->initial_out_disease_tot = std::vector<real_type>(shared->dim_out_disease_tot);
  internal.out_update_switch = std::vector<real_type>(shared->dim_out_update_switch);
  shared->Beta_Tp = (shared->Beta_T0 * shared->Beta_pTm + shared->Beta_Tm * shared->Beta_pT0) / (real_type) (shared->Beta_pT0 + shared->Beta_pTm);
  shared->births_d = user_get_array_fixed<real_type, 2>(user, "births_d", shared->births_d, {shared->dim_births_d_1, shared->dim_births_d_2}, NA_REAL, NA_REAL);
  shared->delta_Tp = (shared->delta_T0 * shared->delta_pTm + shared->delta_Tm * shared->delta_pT0) / (real_type) (shared->delta_pT0 + shared->delta_pTm);
  shared->dim_climate_d = shared->dim_climate_d_1 * shared->dim_climate_d_2;
  shared->dim_out_cases_yr_switch = shared->DATA_NUM_YEARS;
  shared->dim_out_disease_tot_yr = shared->DATA_NUM_YEARS;
  shared->DOW_START0 = fmodr<real_type>((1 + 5 * (fmodr<real_type>((shared->START_YEAR - 1), 4)) + 4 * (fmodr<real_type>((shared->START_YEAR - 1), 100)) + 6 * (fmodr<real_type>((shared->START_YEAR - 1), 400))), 7);
  shared->initial_accum_rain = shared->accum_rain_eq;
  for (int i = 1; i <= shared->DATA_NUM_WEEKS; ++i) {
    shared->initial_out_disease_tot[i - 1] = 0;
  }
  shared->Kc_mean = shared->Mwt * shared->delta0 * (dust::math::pow<real_type>((shared->epsilon * (shared->gamma - shared->delta0) / (real_type) (shared->delta0 * shared->sigma) - 1), (- 1 / (real_type) shared->omega))) / (real_type) shared->epsilon;
  shared->LEAP_YEAR = fmodr<real_type>(shared->START_YEAR, 4);
  shared->offset_variable_out_disease_age = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I1234 + shared->dim_I124 + shared->dim_I1243 + shared->dim_I13 + shared->dim_I132 + shared->dim_I134 + shared->dim_I1342 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I234 + shared->dim_I2341 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_Ntotal_out + shared->dim_out_disease_cur_week + shared->dim_out_disease_tot + shared->dim_R1 + shared->dim_R12 + shared->dim_R123 + shared->dim_R1234 + shared->dim_R124 + shared->dim_R13 + shared->dim_R134 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R234 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_out_disease_isowk = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I1234 + shared->dim_I124 + shared->dim_I1243 + shared->dim_I13 + shared->dim_I132 + shared->dim_I134 + shared->dim_I1342 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I234 + shared->dim_I2341 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_Ntotal_out + shared->dim_out_disease_age + shared->dim_out_disease_cur_week + shared->dim_out_disease_tot + shared->dim_R1 + shared->dim_R12 + shared->dim_R123 + shared->dim_R1234 + shared->dim_R124 + shared->dim_R13 + shared->dim_R134 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R234 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  shared->offset_variable_out_disease_tot_yr = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I1234 + shared->dim_I124 + shared->dim_I1243 + shared->dim_I13 + shared->dim_I132 + shared->dim_I134 + shared->dim_I1342 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I234 + shared->dim_I2341 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_Ntotal_out + shared->dim_out_disease_age + shared->dim_out_disease_cur_week + shared->dim_out_disease_isowk + shared->dim_out_disease_tot + shared->dim_R1 + shared->dim_R12 + shared->dim_R123 + shared->dim_R1234 + shared->dim_R124 + shared->dim_R13 + shared->dim_R134 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R234 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  for (int i = 1; i <= 4; ++i) {
    shared->phi_scale[i - 1] = 1 / (real_type) (1 + shared->dis_pri[i - 1] * shared->phi_ed);
  }
  shared->rel_first_clim_year = shared->FIRST_CLIM_YEAR - shared->START_YEAR;
  shared->rel_last_clim_year = shared->LAST_CLIM_YEAR - shared->START_YEAR;
  shared->initial_out_disease_tot_yr = std::vector<real_type>(shared->dim_out_disease_tot_yr);
  internal.out_cases_yr_switch = std::vector<real_type>(shared->dim_out_cases_yr_switch);
  shared->Beta_norm = 1 / (real_type) ((dust::math::pow<real_type>((shared->Beta_Tp - shared->Beta_T0), shared->Beta_pT0)) * (dust::math::pow<real_type>((shared->Beta_Tm - shared->Beta_Tp), shared->Beta_pTm)));
  shared->climate_d = user_get_array_fixed<real_type, 2>(user, "climate_d", shared->climate_d, {shared->dim_climate_d_1, shared->dim_climate_d_2}, NA_REAL, NA_REAL);
  shared->delta_norm = 1 / (real_type) ((dust::math::pow<real_type>((shared->delta_Tp - shared->delta_T0), shared->delta_pT0)) * (dust::math::pow<real_type>((shared->delta_Tm - shared->delta_Tp), shared->delta_pTm)));
  shared->DOW_START = (shared->DOW_START0 == 0 ? 7 : shared->DOW_START0);
  for (int i = 1; i <= shared->DATA_NUM_YEARS; ++i) {
    shared->initial_out_disease_tot_yr[i - 1] = 0;
  }
  shared->offset_variable_out_seronegative = shared->dim_I1 + shared->dim_I12 + shared->dim_I123 + shared->dim_I1234 + shared->dim_I124 + shared->dim_I1243 + shared->dim_I13 + shared->dim_I132 + shared->dim_I134 + shared->dim_I1342 + shared->dim_I14 + shared->dim_I142 + shared->dim_I143 + shared->dim_I2 + shared->dim_I21 + shared->dim_I23 + shared->dim_I231 + shared->dim_I234 + shared->dim_I2341 + shared->dim_I24 + shared->dim_I241 + shared->dim_I243 + shared->dim_I3 + shared->dim_I31 + shared->dim_I32 + shared->dim_I34 + shared->dim_I341 + shared->dim_I342 + shared->dim_I4 + shared->dim_I41 + shared->dim_I42 + shared->dim_I43 + shared->dim_Ntotal_out + shared->dim_out_disease_age + shared->dim_out_disease_cur_week + shared->dim_out_disease_isowk + shared->dim_out_disease_tot + shared->dim_out_disease_tot_yr + shared->dim_R1 + shared->dim_R12 + shared->dim_R123 + shared->dim_R1234 + shared->dim_R124 + shared->dim_R13 + shared->dim_R134 + shared->dim_R14 + shared->dim_R2 + shared->dim_R23 + shared->dim_R234 + shared->dim_R24 + shared->dim_R3 + shared->dim_R34 + shared->dim_R4 + shared->dim_S + 44;
  for (int i = 1; i <= 4; ++i) {
    shared->phi_pri[i - 1] = shared->phi_scale[i - 1];
  }
  for (int i = 1; i <= 4; ++i) {
    shared->phi_quart[i - 1] = shared->phi_scale[i - 1];
  }
  for (int i = 1; i <= 4; ++i) {
    shared->phi_sec[i - 1] = shared->phi_scale[i - 1];
  }
  for (int i = 1; i <= 4; ++i) {
    shared->phi_tert[i - 1] = shared->phi_scale[i - 1];
  }
  shared->pop_size_d = user_get_array_fixed<real_type, 1>(user, "pop_size_d", shared->pop_size_d, {shared->dim_pop_size_d}, NA_REAL, NA_REAL);
  shared->rel_first_clim_day = (shared->rel_first_clim_year * shared->YL + dust::math::floor(shared->rel_first_clim_year / (real_type) 4) + ((shared->LEAP_YEAR < fmodr<real_type>(shared->rel_first_clim_year, 4) ? 1 : 0)));
  shared->rel_last_clim_day = (shared->rel_last_clim_year * shared->YL + dust::math::floor(shared->rel_last_clim_year / (real_type) 4) + ((shared->LEAP_YEAR < fmodr<real_type>(shared->rel_last_clim_year, 4) ? 1 : 0))) - 1;
  shared->YEAR_OFFSET = (shared->LEAP_YEAR == 0 ? 0 : (4 - shared->LEAP_YEAR));
  shared->age_rate_d = user_get_array_fixed<real_type, 2>(user, "age_rate_d", shared->age_rate_d, {shared->dim_age_rate_d_1, shared->dim_age_rate_d_2}, NA_REAL, NA_REAL);
  shared->age_removal_d = user_get_array_fixed<real_type, 2>(user, "age_removal_d", shared->age_removal_d, {shared->dim_age_removal_d_1, shared->dim_age_removal_d_2}, NA_REAL, NA_REAL);
  shared->initial_out_CUR_DOW = shared->DOW_START;
  shared->life_expec_d = user_get_array_fixed<real_type, 2>(user, "life_expec_d", shared->life_expec_d, {shared->dim_life_expec_d_1, shared->dim_life_expec_d_2}, NA_REAL, NA_REAL);
  shared->max_clim_day = shared->rel_last_clim_day - shared->rel_first_clim_day;
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->N_init_age0[i - 1] = shared->pop_size_d[i + 1 - 1];
  }
  shared->rainfall_mean = odin_sum2<real_type>(shared->climate_d.data(), 0, shared->dim_climate_d_1, 1, 2, shared->dim_climate_d_1) / (real_type) shared->NTP;
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->init_life_expec[i - 1] = shared->life_expec_d[shared->dim_life_expec_d_1 * (1 + i - 1) + static_cast<int>(shared->year_calib) - 1];
  }
  shared->init_lifespan = shared->life_expec_d[shared->dim_life_expec_d_1 * 1 + static_cast<int>(shared->year_calib) - 1];
  shared->N_init = odin_sum1<real_type>(shared->N_init_age0.data(), 0, shared->dim_N_init_age0);
  shared->pop_scale = (shared->N_sim <= 0 ? 1 : shared->N_sim / (real_type) shared->N_init);
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->suscinitpop[i - 1] = shared->FOIas[i - 1] * shared->init_life_expec[i - 1];
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->N_init_age[i - 1] = shared->pop_size_d[i + 1 - 1] * shared->pop_scale;
  }
  shared->R0agescale = odin_sum1<real_type>(shared->init_life_expec.data(), 0, shared->dim_init_life_expec) / (real_type) odin_sum1<real_type>(shared->suscinitpop.data(), 0, shared->dim_suscinitpop);
  shared->initial_NT_out = odin_sum1<real_type>(shared->N_init_age.data(), 0, shared->dim_N_init_age);
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_Ntotal_out[i - 1] = shared->N_init_age[i - 1];
  }
  shared->N_eq = odin_sum1<real_type>(shared->N_init_age.data(), 0, shared->dim_N_init_age);
  shared->R0_1 = shared->kappa * shared->kappa * shared->Mwt * shared->Beta_hm_mean * shared->inf_per * shared->Beta_mh_mean * shared->Rel_R01 / (real_type) (1 + shared->delta0 * shared->eip) / (real_type) shared->delta0 / (real_type) shared->R0agescale;
  shared->R0_2 = shared->kappa * shared->kappa * shared->Mwt * shared->Beta_hm_mean * shared->inf_per * shared->Beta_mh_mean * shared->Rel_R02 / (real_type) (1 + shared->delta0 * shared->eip) / (real_type) shared->delta0 / (real_type) shared->R0agescale;
  shared->R0_3 = shared->kappa * shared->kappa * shared->Mwt * shared->Beta_hm_mean * shared->inf_per * shared->Beta_mh_mean * shared->Rel_R03 / (real_type) (1 + shared->delta0 * shared->eip) / (real_type) shared->delta0 / (real_type) shared->R0agescale;
  shared->R0_4 = shared->kappa * shared->kappa * shared->Mwt * shared->Beta_hm_mean * shared->inf_per * shared->Beta_mh_mean * shared->Rel_R04 / (real_type) (1 + shared->delta0 * shared->eip) / (real_type) shared->delta0 / (real_type) shared->R0agescale;
  shared->eq_FOI1 = shared->R0_1 / (real_type) shared->init_lifespan;
  shared->eq_FOI2 = shared->R0_2 / (real_type) shared->init_lifespan;
  shared->eq_FOI3 = shared->R0_3 / (real_type) shared->init_lifespan;
  shared->eq_FOI4 = shared->R0_4 / (real_type) shared->init_lifespan;
  shared->initial_Lwt = shared->Mwt * shared->N_eq * shared->delta0 / (real_type) shared->epsilon;
  shared->initial_Mwt_I1 = dust::math::floor(shared->Mwt * shared->N_eq * shared->init_inf_mos[0]);
  shared->initial_Mwt_I2 = dust::math::floor(shared->Mwt * shared->N_eq * shared->init_inf_mos[1]);
  shared->initial_Mwt_I3 = dust::math::floor(shared->Mwt * shared->N_eq * shared->init_inf_mos[2]);
  shared->initial_Mwt_I4 = dust::math::floor(shared->Mwt * shared->N_eq * shared->init_inf_mos[3]);
  shared->initial_Mwt_S = shared->Mwt * shared->N_eq * static_cast<real_type>(0.99970000000000003);
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_R1[i - 1] = dust::math::floor(static_cast<real_type>(0.5) + shared->N_init_age[i - 1] * (1 - dust::math::exp(- shared->eq_FOI1 * shared->mean_age[i - 1])) * dust::math::exp(- (shared->eq_FOI2 + shared->eq_FOI3 + shared->eq_FOI4) * shared->mean_age[i - 1]));
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_R12[i - 1] = dust::math::floor(static_cast<real_type>(0.5) + shared->N_init_age[i - 1] * (1 - dust::math::exp(- shared->eq_FOI1 * shared->mean_age[i - 1])) * (1 - dust::math::exp(- shared->eq_FOI2 * shared->mean_age[i - 1])) * dust::math::exp(- (shared->eq_FOI3 + shared->eq_FOI4) * shared->mean_age[i - 1]));
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_R123[i - 1] = dust::math::floor(static_cast<real_type>(0.5) + shared->N_init_age[i - 1] * (1 - dust::math::exp(- shared->eq_FOI1 * shared->mean_age[i - 1])) * (1 - dust::math::exp(- shared->eq_FOI2 * shared->mean_age[i - 1])) * (1 - dust::math::exp(- shared->eq_FOI3 * shared->mean_age[i - 1])) * dust::math::exp(- shared->eq_FOI4 * shared->mean_age[i - 1]));
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_R1234[i - 1] = dust::math::floor(static_cast<real_type>(0.5) + shared->N_init_age[i - 1] * (1 - dust::math::exp(- shared->eq_FOI1 * shared->mean_age[i - 1])) * (1 - dust::math::exp(- shared->eq_FOI2 * shared->mean_age[i - 1])) * (1 - dust::math::exp(- shared->eq_FOI3 * shared->mean_age[i - 1])) * (1 - dust::math::exp(- shared->eq_FOI4 * shared->mean_age[i - 1])));
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_R124[i - 1] = dust::math::floor(static_cast<real_type>(0.5) + shared->N_init_age[i - 1] * (1 - dust::math::exp(- shared->eq_FOI1 * shared->mean_age[i - 1])) * (1 - dust::math::exp(- shared->eq_FOI2 * shared->mean_age[i - 1])) * (1 - dust::math::exp(- shared->eq_FOI4 * shared->mean_age[i - 1])) * dust::math::exp(- shared->eq_FOI3 * shared->mean_age[i - 1]));
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_R13[i - 1] = dust::math::floor(static_cast<real_type>(0.5) + shared->N_init_age[i - 1] * (1 - dust::math::exp(- shared->eq_FOI1 * shared->mean_age[i - 1])) * (1 - dust::math::exp(- shared->eq_FOI3 * shared->mean_age[i - 1])) * dust::math::exp(- (shared->eq_FOI2 + shared->eq_FOI4) * shared->mean_age[i - 1]));
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_R134[i - 1] = dust::math::floor(static_cast<real_type>(0.5) + shared->N_init_age[i - 1] * (1 - dust::math::exp(- shared->eq_FOI1 * shared->mean_age[i - 1])) * (1 - dust::math::exp(- shared->eq_FOI3 * shared->mean_age[i - 1])) * (1 - dust::math::exp(- shared->eq_FOI4 * shared->mean_age[i - 1])) * dust::math::exp(- shared->eq_FOI2 * shared->mean_age[i - 1]));
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_R14[i - 1] = dust::math::floor(static_cast<real_type>(0.5) + shared->N_init_age[i - 1] * (1 - dust::math::exp(- shared->eq_FOI1 * shared->mean_age[i - 1])) * (1 - dust::math::exp(- shared->eq_FOI4 * shared->mean_age[i - 1])) * dust::math::exp(- (shared->eq_FOI2 + shared->eq_FOI3) * shared->mean_age[i - 1]));
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_R2[i - 1] = dust::math::floor(static_cast<real_type>(0.5) + shared->N_init_age[i - 1] * (1 - dust::math::exp(- shared->eq_FOI2 * shared->mean_age[i - 1])) * dust::math::exp(- (shared->eq_FOI1 + shared->eq_FOI3 + shared->eq_FOI4) * shared->mean_age[i - 1]));
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_R23[i - 1] = dust::math::floor(static_cast<real_type>(0.5) + shared->N_init_age[i - 1] * (1 - dust::math::exp(- shared->eq_FOI2 * shared->mean_age[i - 1])) * (1 - dust::math::exp(- shared->eq_FOI3 * shared->mean_age[i - 1])) * dust::math::exp(- (shared->eq_FOI1 + shared->eq_FOI4) * shared->mean_age[i - 1]));
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_R234[i - 1] = dust::math::floor(static_cast<real_type>(0.5) + shared->N_init_age[i - 1] * (1 - dust::math::exp(- shared->eq_FOI2 * shared->mean_age[i - 1])) * (1 - dust::math::exp(- shared->eq_FOI3 * shared->mean_age[i - 1])) * (1 - dust::math::exp(- shared->eq_FOI4 * shared->mean_age[i - 1])) * dust::math::exp(- shared->eq_FOI1 * shared->mean_age[i - 1]));
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_R24[i - 1] = dust::math::floor(static_cast<real_type>(0.5) + shared->N_init_age[i - 1] * (1 - dust::math::exp(- shared->eq_FOI2 * shared->mean_age[i - 1])) * (1 - dust::math::exp(- shared->eq_FOI4 * shared->mean_age[i - 1])) * dust::math::exp(- (shared->eq_FOI1 + shared->eq_FOI3) * shared->mean_age[i - 1]));
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_R3[i - 1] = dust::math::floor(static_cast<real_type>(0.5) + shared->N_init_age[i - 1] * (1 - dust::math::exp(- shared->eq_FOI3 * shared->mean_age[i - 1])) * dust::math::exp(- (shared->eq_FOI1 + shared->eq_FOI2 + shared->eq_FOI4) * shared->mean_age[i - 1]));
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_R34[i - 1] = dust::math::floor(static_cast<real_type>(0.5) + shared->N_init_age[i - 1] * (1 - dust::math::exp(- shared->eq_FOI3 * shared->mean_age[i - 1])) * (1 - dust::math::exp(- shared->eq_FOI4 * shared->mean_age[i - 1])) * dust::math::exp(- (shared->eq_FOI1 + shared->eq_FOI2) * shared->mean_age[i - 1]));
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_R4[i - 1] = dust::math::floor(static_cast<real_type>(0.5) + shared->N_init_age[i - 1] * (1 - dust::math::exp(- shared->eq_FOI4 * shared->mean_age[i - 1])) * dust::math::exp(- (shared->eq_FOI1 + shared->eq_FOI2 + shared->eq_FOI3) * shared->mean_age[i - 1]));
  }
  for (int i = 1; i <= shared->N_age; ++i) {
    shared->initial_S[i - 1] = dust::math::floor(static_cast<real_type>(0.5) + shared->N_init_age[i - 1] * dust::math::exp(- (shared->eq_FOI1 + shared->eq_FOI2 + shared->eq_FOI3 + shared->eq_FOI4) * shared->mean_age[i - 1]));
  }
  return dust::pars_type<model>(shared, internal);
}
template <>
cpp11::sexp dust_info<model>(const dust::pars_type<model>& pars) {
  const std::shared_ptr<const model::shared_type> shared = pars.shared;
  cpp11::writable::strings nms({"out_CUR_DOW", "out_year", "DATA_DAY", "out_curisoweek", "out_cur_clim_day", "accum_rain", "out_R0agescale", "Lwt", "Mwt_S", "Mwt_E1", "Mwt_E2", "Mwt_E3", "Mwt_E4", "Mwt_I1", "Mwt_I2", "Mwt_I3", "Mwt_I4", "R0t_1", "R0t_2", "R0t_3", "R0t_4", "out_temp", "out_delta", "out_beta", "out_Mwt", "NT_out", "Y1T_out", "Y2T_out", "Y3T_out", "Y4T_out", "exposed1", "exposed2", "exposed3", "exposed4", "infectious1", "infectious2", "infectious3", "infectious4", "inc_FOI1", "inc_FOI2", "inc_FOI3", "inc_FOI4", "tot_inc_FOI", "cur_tot_FOI", "S", "I1", "I2", "I3", "I4", "R1", "R2", "R3", "R4", "I21", "I31", "I41", "I12", "I32", "I42", "I13", "I23", "I43", "I14", "I24", "I34", "R12", "R13", "R14", "R23", "R24", "R34", "I231", "I241", "I341", "I132", "I142", "I342", "I123", "I143", "I243", "I124", "I134", "I234", "R123", "R124", "R134", "R234", "I2341", "I1342", "I1243", "I1234", "R1234", "Ntotal_out", "out_disease_cur_week", "out_disease_tot", "out_disease_age", "out_disease_isowk", "out_disease_tot_yr", "out_seronegative"});
  cpp11::writable::list dim(99);
  dim[0] = cpp11::writable::integers({1});
  dim[1] = cpp11::writable::integers({1});
  dim[2] = cpp11::writable::integers({1});
  dim[3] = cpp11::writable::integers({1});
  dim[4] = cpp11::writable::integers({1});
  dim[5] = cpp11::writable::integers({1});
  dim[6] = cpp11::writable::integers({1});
  dim[7] = cpp11::writable::integers({1});
  dim[8] = cpp11::writable::integers({1});
  dim[9] = cpp11::writable::integers({1});
  dim[10] = cpp11::writable::integers({1});
  dim[11] = cpp11::writable::integers({1});
  dim[12] = cpp11::writable::integers({1});
  dim[13] = cpp11::writable::integers({1});
  dim[14] = cpp11::writable::integers({1});
  dim[15] = cpp11::writable::integers({1});
  dim[16] = cpp11::writable::integers({1});
  dim[17] = cpp11::writable::integers({1});
  dim[18] = cpp11::writable::integers({1});
  dim[19] = cpp11::writable::integers({1});
  dim[20] = cpp11::writable::integers({1});
  dim[21] = cpp11::writable::integers({1});
  dim[22] = cpp11::writable::integers({1});
  dim[23] = cpp11::writable::integers({1});
  dim[24] = cpp11::writable::integers({1});
  dim[25] = cpp11::writable::integers({1});
  dim[26] = cpp11::writable::integers({1});
  dim[27] = cpp11::writable::integers({1});
  dim[28] = cpp11::writable::integers({1});
  dim[29] = cpp11::writable::integers({1});
  dim[30] = cpp11::writable::integers({1});
  dim[31] = cpp11::writable::integers({1});
  dim[32] = cpp11::writable::integers({1});
  dim[33] = cpp11::writable::integers({1});
  dim[34] = cpp11::writable::integers({1});
  dim[35] = cpp11::writable::integers({1});
  dim[36] = cpp11::writable::integers({1});
  dim[37] = cpp11::writable::integers({1});
  dim[38] = cpp11::writable::integers({1});
  dim[39] = cpp11::writable::integers({1});
  dim[40] = cpp11::writable::integers({1});
  dim[41] = cpp11::writable::integers({1});
  dim[42] = cpp11::writable::integers({1});
  dim[43] = cpp11::writable::integers({1});
  dim[44] = cpp11::writable::integers({shared->dim_S});
  dim[45] = cpp11::writable::integers({shared->dim_I1});
  dim[46] = cpp11::writable::integers({shared->dim_I2});
  dim[47] = cpp11::writable::integers({shared->dim_I3});
  dim[48] = cpp11::writable::integers({shared->dim_I4});
  dim[49] = cpp11::writable::integers({shared->dim_R1});
  dim[50] = cpp11::writable::integers({shared->dim_R2});
  dim[51] = cpp11::writable::integers({shared->dim_R3});
  dim[52] = cpp11::writable::integers({shared->dim_R4});
  dim[53] = cpp11::writable::integers({shared->dim_I21});
  dim[54] = cpp11::writable::integers({shared->dim_I31});
  dim[55] = cpp11::writable::integers({shared->dim_I41});
  dim[56] = cpp11::writable::integers({shared->dim_I12});
  dim[57] = cpp11::writable::integers({shared->dim_I32});
  dim[58] = cpp11::writable::integers({shared->dim_I42});
  dim[59] = cpp11::writable::integers({shared->dim_I13});
  dim[60] = cpp11::writable::integers({shared->dim_I23});
  dim[61] = cpp11::writable::integers({shared->dim_I43});
  dim[62] = cpp11::writable::integers({shared->dim_I14});
  dim[63] = cpp11::writable::integers({shared->dim_I24});
  dim[64] = cpp11::writable::integers({shared->dim_I34});
  dim[65] = cpp11::writable::integers({shared->dim_R12});
  dim[66] = cpp11::writable::integers({shared->dim_R13});
  dim[67] = cpp11::writable::integers({shared->dim_R14});
  dim[68] = cpp11::writable::integers({shared->dim_R23});
  dim[69] = cpp11::writable::integers({shared->dim_R24});
  dim[70] = cpp11::writable::integers({shared->dim_R34});
  dim[71] = cpp11::writable::integers({shared->dim_I231});
  dim[72] = cpp11::writable::integers({shared->dim_I241});
  dim[73] = cpp11::writable::integers({shared->dim_I341});
  dim[74] = cpp11::writable::integers({shared->dim_I132});
  dim[75] = cpp11::writable::integers({shared->dim_I142});
  dim[76] = cpp11::writable::integers({shared->dim_I342});
  dim[77] = cpp11::writable::integers({shared->dim_I123});
  dim[78] = cpp11::writable::integers({shared->dim_I143});
  dim[79] = cpp11::writable::integers({shared->dim_I243});
  dim[80] = cpp11::writable::integers({shared->dim_I124});
  dim[81] = cpp11::writable::integers({shared->dim_I134});
  dim[82] = cpp11::writable::integers({shared->dim_I234});
  dim[83] = cpp11::writable::integers({shared->dim_R123});
  dim[84] = cpp11::writable::integers({shared->dim_R124});
  dim[85] = cpp11::writable::integers({shared->dim_R134});
  dim[86] = cpp11::writable::integers({shared->dim_R234});
  dim[87] = cpp11::writable::integers({shared->dim_I2341});
  dim[88] = cpp11::writable::integers({shared->dim_I1342});
  dim[89] = cpp11::writable::integers({shared->dim_I1243});
  dim[90] = cpp11::writable::integers({shared->dim_I1234});
  dim[91] = cpp11::writable::integers({shared->dim_R1234});
  dim[92] = cpp11::writable::integers({shared->dim_Ntotal_out});
  dim[93] = cpp11::writable::integers({shared->dim_out_disease_cur_week});
  dim[94] = cpp11::writable::integers({shared->dim_out_disease_tot});
  dim[95] = cpp11::writable::integers({shared->dim_out_disease_age});
  dim[96] = cpp11::writable::integers({shared->dim_out_disease_isowk});
  dim[97] = cpp11::writable::integers({shared->dim_out_disease_tot_yr});
  dim[98] = cpp11::writable::integers({shared->dim_out_seronegative});
  dim.names() = nms;
  cpp11::writable::list index(99);
  index[0] = cpp11::writable::integers({1});
  index[1] = cpp11::writable::integers({2});
  index[2] = cpp11::writable::integers({3});
  index[3] = cpp11::writable::integers({4});
  index[4] = cpp11::writable::integers({5});
  index[5] = cpp11::writable::integers({6});
  index[6] = cpp11::writable::integers({7});
  index[7] = cpp11::writable::integers({8});
  index[8] = cpp11::writable::integers({9});
  index[9] = cpp11::writable::integers({10});
  index[10] = cpp11::writable::integers({11});
  index[11] = cpp11::writable::integers({12});
  index[12] = cpp11::writable::integers({13});
  index[13] = cpp11::writable::integers({14});
  index[14] = cpp11::writable::integers({15});
  index[15] = cpp11::writable::integers({16});
  index[16] = cpp11::writable::integers({17});
  index[17] = cpp11::writable::integers({18});
  index[18] = cpp11::writable::integers({19});
  index[19] = cpp11::writable::integers({20});
  index[20] = cpp11::writable::integers({21});
  index[21] = cpp11::writable::integers({22});
  index[22] = cpp11::writable::integers({23});
  index[23] = cpp11::writable::integers({24});
  index[24] = cpp11::writable::integers({25});
  index[25] = cpp11::writable::integers({26});
  index[26] = cpp11::writable::integers({27});
  index[27] = cpp11::writable::integers({28});
  index[28] = cpp11::writable::integers({29});
  index[29] = cpp11::writable::integers({30});
  index[30] = cpp11::writable::integers({31});
  index[31] = cpp11::writable::integers({32});
  index[32] = cpp11::writable::integers({33});
  index[33] = cpp11::writable::integers({34});
  index[34] = cpp11::writable::integers({35});
  index[35] = cpp11::writable::integers({36});
  index[36] = cpp11::writable::integers({37});
  index[37] = cpp11::writable::integers({38});
  index[38] = cpp11::writable::integers({39});
  index[39] = cpp11::writable::integers({40});
  index[40] = cpp11::writable::integers({41});
  index[41] = cpp11::writable::integers({42});
  index[42] = cpp11::writable::integers({43});
  index[43] = cpp11::writable::integers({44});
  index[44] = integer_sequence(45, shared->dim_S);
  index[45] = integer_sequence(shared->offset_variable_I1 + 1, shared->dim_I1);
  index[46] = integer_sequence(shared->offset_variable_I2 + 1, shared->dim_I2);
  index[47] = integer_sequence(shared->offset_variable_I3 + 1, shared->dim_I3);
  index[48] = integer_sequence(shared->offset_variable_I4 + 1, shared->dim_I4);
  index[49] = integer_sequence(shared->offset_variable_R1 + 1, shared->dim_R1);
  index[50] = integer_sequence(shared->offset_variable_R2 + 1, shared->dim_R2);
  index[51] = integer_sequence(shared->offset_variable_R3 + 1, shared->dim_R3);
  index[52] = integer_sequence(shared->offset_variable_R4 + 1, shared->dim_R4);
  index[53] = integer_sequence(shared->offset_variable_I21 + 1, shared->dim_I21);
  index[54] = integer_sequence(shared->offset_variable_I31 + 1, shared->dim_I31);
  index[55] = integer_sequence(shared->offset_variable_I41 + 1, shared->dim_I41);
  index[56] = integer_sequence(shared->offset_variable_I12 + 1, shared->dim_I12);
  index[57] = integer_sequence(shared->offset_variable_I32 + 1, shared->dim_I32);
  index[58] = integer_sequence(shared->offset_variable_I42 + 1, shared->dim_I42);
  index[59] = integer_sequence(shared->offset_variable_I13 + 1, shared->dim_I13);
  index[60] = integer_sequence(shared->offset_variable_I23 + 1, shared->dim_I23);
  index[61] = integer_sequence(shared->offset_variable_I43 + 1, shared->dim_I43);
  index[62] = integer_sequence(shared->offset_variable_I14 + 1, shared->dim_I14);
  index[63] = integer_sequence(shared->offset_variable_I24 + 1, shared->dim_I24);
  index[64] = integer_sequence(shared->offset_variable_I34 + 1, shared->dim_I34);
  index[65] = integer_sequence(shared->offset_variable_R12 + 1, shared->dim_R12);
  index[66] = integer_sequence(shared->offset_variable_R13 + 1, shared->dim_R13);
  index[67] = integer_sequence(shared->offset_variable_R14 + 1, shared->dim_R14);
  index[68] = integer_sequence(shared->offset_variable_R23 + 1, shared->dim_R23);
  index[69] = integer_sequence(shared->offset_variable_R24 + 1, shared->dim_R24);
  index[70] = integer_sequence(shared->offset_variable_R34 + 1, shared->dim_R34);
  index[71] = integer_sequence(shared->offset_variable_I231 + 1, shared->dim_I231);
  index[72] = integer_sequence(shared->offset_variable_I241 + 1, shared->dim_I241);
  index[73] = integer_sequence(shared->offset_variable_I341 + 1, shared->dim_I341);
  index[74] = integer_sequence(shared->offset_variable_I132 + 1, shared->dim_I132);
  index[75] = integer_sequence(shared->offset_variable_I142 + 1, shared->dim_I142);
  index[76] = integer_sequence(shared->offset_variable_I342 + 1, shared->dim_I342);
  index[77] = integer_sequence(shared->offset_variable_I123 + 1, shared->dim_I123);
  index[78] = integer_sequence(shared->offset_variable_I143 + 1, shared->dim_I143);
  index[79] = integer_sequence(shared->offset_variable_I243 + 1, shared->dim_I243);
  index[80] = integer_sequence(shared->offset_variable_I124 + 1, shared->dim_I124);
  index[81] = integer_sequence(shared->offset_variable_I134 + 1, shared->dim_I134);
  index[82] = integer_sequence(shared->offset_variable_I234 + 1, shared->dim_I234);
  index[83] = integer_sequence(shared->offset_variable_R123 + 1, shared->dim_R123);
  index[84] = integer_sequence(shared->offset_variable_R124 + 1, shared->dim_R124);
  index[85] = integer_sequence(shared->offset_variable_R134 + 1, shared->dim_R134);
  index[86] = integer_sequence(shared->offset_variable_R234 + 1, shared->dim_R234);
  index[87] = integer_sequence(shared->offset_variable_I2341 + 1, shared->dim_I2341);
  index[88] = integer_sequence(shared->offset_variable_I1342 + 1, shared->dim_I1342);
  index[89] = integer_sequence(shared->offset_variable_I1243 + 1, shared->dim_I1243);
  index[90] = integer_sequence(shared->offset_variable_I1234 + 1, shared->dim_I1234);
  index[91] = integer_sequence(shared->offset_variable_R1234 + 1, shared->dim_R1234);
  index[92] = integer_sequence(shared->offset_variable_Ntotal_out + 1, shared->dim_Ntotal_out);
  index[93] = integer_sequence(shared->offset_variable_out_disease_cur_week + 1, shared->dim_out_disease_cur_week);
  index[94] = integer_sequence(shared->offset_variable_out_disease_tot + 1, shared->dim_out_disease_tot);
  index[95] = integer_sequence(shared->offset_variable_out_disease_age + 1, shared->dim_out_disease_age);
  index[96] = integer_sequence(shared->offset_variable_out_disease_isowk + 1, shared->dim_out_disease_isowk);
  index[97] = integer_sequence(shared->offset_variable_out_disease_tot_yr + 1, shared->dim_out_disease_tot_yr);
  index[98] = integer_sequence(shared->offset_variable_out_seronegative + 1, shared->dim_out_seronegative);
  index.names() = nms;
  size_t len = shared->offset_variable_out_seronegative + shared->dim_out_seronegative;
  using namespace cpp11::literals;
  return cpp11::writable::list({
           "dim"_nm = dim,
           "len"_nm = len,
           "index"_nm = index});
}
}

cpp11::sexp dust_model_gpu_info() {
  return dust::gpu::r::gpu_info();
}
using model_cpu = dust::dust_cpu<model>;

cpp11::sexp dust_cpu_model_capabilities() {
  return dust::r::dust_capabilities<model_cpu>();
}

SEXP dust_cpu_model_alloc(cpp11::list r_pars, bool pars_multi, cpp11::sexp r_time,
                             cpp11::sexp r_n_particles, int n_threads,
                             cpp11::sexp r_seed, bool deterministic,
                             cpp11::sexp gpu_config, cpp11::sexp ode_control) {
  return dust::r::dust_cpu_alloc<model>(r_pars, pars_multi, r_time, r_n_particles,
                                        n_threads, r_seed, deterministic,
                                        gpu_config, ode_control);
}

SEXP dust_cpu_model_run(SEXP ptr, cpp11::sexp r_time_end) {
  return dust::r::dust_run<model_cpu>(ptr, r_time_end);
}

SEXP dust_cpu_model_simulate(SEXP ptr, cpp11::sexp r_time_end) {
  return dust::r::dust_simulate<model_cpu>(ptr, r_time_end);
}

SEXP dust_cpu_model_run_adjoint(SEXP ptr) {
  return dust::r::dust_run_adjoint<model_cpu>(ptr);
}

SEXP dust_cpu_model_set_index(SEXP ptr, cpp11::sexp r_index) {
  dust::r::dust_set_index<model_cpu>(ptr, r_index);
  return R_NilValue;
}

SEXP dust_cpu_model_update_state(SEXP ptr, SEXP r_pars, SEXP r_state,
                                           SEXP r_time, SEXP r_set_initial_state, SEXP index, SEXP reset_step_size) {
  return dust::r::dust_update_state<model_cpu>(ptr, r_pars, r_state, r_time,
                                                      r_set_initial_state, index, reset_step_size);
}

SEXP dust_cpu_model_state(SEXP ptr, SEXP r_index) {
  return dust::r::dust_state<model_cpu>(ptr, r_index);
}

SEXP dust_cpu_model_time(SEXP ptr) {
  return dust::r::dust_time<model_cpu>(ptr);
}

void dust_cpu_model_reorder(SEXP ptr, cpp11::sexp r_index) {
  return dust::r::dust_reorder<model_cpu>(ptr, r_index);
}

SEXP dust_cpu_model_resample(SEXP ptr, cpp11::doubles r_weights) {
  return dust::r::dust_resample<model_cpu>(ptr, r_weights);
}

SEXP dust_cpu_model_rng_state(SEXP ptr, bool first_only, bool last_only) {
  return dust::r::dust_rng_state<model_cpu>(ptr, first_only, last_only);
}

SEXP dust_cpu_model_set_rng_state(SEXP ptr, cpp11::raws rng_state) {
  dust::r::dust_set_rng_state<model_cpu>(ptr, rng_state);
  return R_NilValue;
}

SEXP dust_cpu_model_set_data(SEXP ptr, cpp11::list data,
                                       bool shared) {
  dust::r::dust_set_data<model_cpu>(ptr, data, shared);
  return R_NilValue;
}

SEXP dust_cpu_model_compare_data(SEXP ptr) {
  return dust::r::dust_compare_data<model_cpu>(ptr);
}

SEXP dust_cpu_model_filter(SEXP ptr, SEXP time_end,
                                     bool save_trajectories,
                                     cpp11::sexp time_snapshot,
                                     cpp11::sexp min_log_likelihood) {
  return dust::r::dust_filter<model_cpu>(ptr, time_end,
                                                save_trajectories,
                                                time_snapshot,
                                                min_log_likelihood);
}

void dust_cpu_model_set_n_threads(SEXP ptr, int n_threads) {
  return dust::r::dust_set_n_threads<model_cpu>(ptr, n_threads);
}

int dust_cpu_model_n_state(SEXP ptr) {
  return dust::r::dust_n_state<model_cpu>(ptr);
}

void dust_cpu_model_set_stochastic_schedule(SEXP ptr, SEXP time) {
  dust::r::dust_set_stochastic_schedule<model_cpu>(ptr, time);
}

SEXP dust_cpu_model_ode_statistics(SEXP ptr) {
  return dust::r::dust_ode_statistics<model_cpu>(ptr);
}
